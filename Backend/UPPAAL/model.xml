<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC "-//Uppaal Team//DTD Flat System 1.5//EN" "http://www.it.uu.se/research/group/darts/uppaal/flat-1_5.dtd">
<nta>
  <declaration>
    broadcast chan start_InteriorLight_A, done_InteriorLight_A, preempt_InteriorLight_A;
    broadcast chan start_AckHandler_A, done_AckHandler_A, preempt_AckHandler_A;
    broadcast chan start_Crash_B, done_Crash_B, preempt_Crash_B;
    broadcast chan start_PermissionReqTx_B, done_PermissionReqTx_B, preempt_PermissionReqTx_B;
    broadcast chan start_PermissionAckRx_B, done_PermissionAckRx_B, preempt_PermissionAckRx_B;
    broadcast chan start_TrajectoryPlanner_B, done_TrajectoryPlanner_B, preempt_TrajectoryPlanner_B;
    broadcast chan start_Controller_B, done_Controller_B, preempt_Controller_B;
    broadcast chan release_InteriorLight_A;
    broadcast chan release_AckHandler_A;
    broadcast chan release_Crash_B;
    broadcast chan release_PermissionReqTx_B;
    broadcast chan release_PermissionAckRx_B;
    broadcast chan release_TrajectoryPlanner_B;
    broadcast chan release_Controller_B;
    const int NUM_COMPONENTS_A = 2;
    const int IDX_InteriorLight_A = 0;
    const int IDX_AckHandler_A = 1;
    int priorities_A[NUM_COMPONENTS_A] = {10, 2};
    bool ready_A[NUM_COMPONENTS_A];
    int running_A = -1;
    int criticality_A[NUM_COMPONENTS_A] = {2, 1};
    int thresholds_A[NUM_COMPONENTS_A] = {2, 1};
    const int WCET_A[NUM_COMPONENTS_A] = {10, 2};
    int remaining_A[NUM_COMPONENTS_A];
    int next_A = -1;
    const int NUM_COMPONENTS_B = 5;
    const int IDX_Crash_B = 0;
    const int IDX_PermissionReqTx_B = 1;
    const int IDX_PermissionAckRx_B = 2;
    const int IDX_TrajectoryPlanner_B = 3;
    const int IDX_Controller_B = 4;
    int priorities_B[NUM_COMPONENTS_B] = {1, 1, 3, 4, 5};
    bool ready_B[NUM_COMPONENTS_B];
    int running_B = -1;
    int criticality_B[NUM_COMPONENTS_B] = {0, 1, 1, 1, 1};
    int thresholds_B[NUM_COMPONENTS_B] = {0, 1, 1, 1, 1};
    const int WCET_B[NUM_COMPONENTS_B] = {10, 2, 2, 10, 25};
    int remaining_B[NUM_COMPONENTS_B];
    int next_B = -1;
  </declaration>
  <template>
    <name>InteriorLight_A</name>
    <declaration>clock x;
clock slice;</declaration>
    <location id="InteriorLight_A_Idle">
      <name>Idle</name>
      <label kind="invariant">x &lt;= 40</label>
    </location>
    <location id="InteriorLight_A_Ready">
      <name>Ready</name>
    </location>
    <location id="InteriorLight_A_Exec">
      <name>Exec</name>
      <label kind="invariant">slice &lt;= 1 &amp;&amp; x &lt;= 40</label>
    </location>
    <location id="InteriorLight_A_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="InteriorLight_A_Idle" />
    <transition>
      <source ref="InteriorLight_A_Idle" />
      <target ref="InteriorLight_A_Ready" />
      <label kind="synchronisation">release_InteriorLight_A?</label>
      <label kind="assignment">x = 0, slice = 0, ready_A[IDX_InteriorLight_A] = true, remaining_A[IDX_InteriorLight_A] = WCET_A[IDX_InteriorLight_A]</label>
    </transition>
    <transition>
      <source ref="InteriorLight_A_Ready" />
      <target ref="InteriorLight_A_Exec" />
      <label kind="synchronisation">start_InteriorLight_A?</label>
      <label kind="assignment">slice = 0</label>
    </transition>
    <transition>
      <source ref="InteriorLight_A_Exec" />
      <target ref="InteriorLight_A_Exec" />
      <label kind="guard">running_A == IDX_InteriorLight_A &amp;&amp; remaining_A[IDX_InteriorLight_A] &gt; 0 &amp;&amp; slice == 1</label>
      <label kind="assignment">slice = 0, remaining_A[IDX_InteriorLight_A] = remaining_A[IDX_InteriorLight_A] - 1</label>
    </transition>
    <transition>
      <source ref="InteriorLight_A_Exec" />
      <target ref="InteriorLight_A_Idle" />
      <label kind="guard">running_A == IDX_InteriorLight_A &amp;&amp; remaining_A[IDX_InteriorLight_A] == 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">done_InteriorLight_A!</label>
      <label kind="assignment">x = 0, slice = 0</label>
    </transition>
    <transition>
      <source ref="InteriorLight_A_Exec" />
      <target ref="InteriorLight_A_Ready" />
      <label kind="guard">running_A == IDX_InteriorLight_A &amp;&amp; remaining_A[IDX_InteriorLight_A] &gt; 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">preempt_InteriorLight_A?</label>
      <label kind="assignment">ready_A[IDX_InteriorLight_A] = true</label>
    </transition>
    <transition>
      <source ref="InteriorLight_A_Ready" />
      <target ref="InteriorLight_A_DeadlineMiss" />
      <label kind="guard">x &gt; 40</label>
    </transition>
    <transition>
      <source ref="InteriorLight_A_Exec" />
      <target ref="InteriorLight_A_DeadlineMiss" />
      <label kind="guard">x &gt; 40</label>
    </transition>
  </template>
  <template>
    <name>AckHandler_A</name>
    <declaration>clock x;
clock slice;</declaration>
    <location id="AckHandler_A_Idle">
      <name>Idle</name>
    </location>
    <location id="AckHandler_A_Ready">
      <name>Ready</name>
    </location>
    <location id="AckHandler_A_Exec">
      <name>Exec</name>
      <label kind="invariant">slice &lt;= 1 &amp;&amp; x &lt;= 2</label>
    </location>
    <location id="AckHandler_A_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="AckHandler_A_Idle" />
    <transition>
      <source ref="AckHandler_A_Idle" />
      <target ref="AckHandler_A_Ready" />
      <label kind="synchronisation">release_AckHandler_A?</label>
      <label kind="assignment">x = 0, slice = 0, ready_A[IDX_AckHandler_A] = true, remaining_A[IDX_AckHandler_A] = WCET_A[IDX_AckHandler_A]</label>
    </transition>
    <transition>
      <source ref="AckHandler_A_Ready" />
      <target ref="AckHandler_A_Exec" />
      <label kind="synchronisation">start_AckHandler_A?</label>
      <label kind="assignment">slice = 0</label>
    </transition>
    <transition>
      <source ref="AckHandler_A_Exec" />
      <target ref="AckHandler_A_Exec" />
      <label kind="guard">running_A == IDX_AckHandler_A &amp;&amp; remaining_A[IDX_AckHandler_A] &gt; 0 &amp;&amp; slice == 1</label>
      <label kind="assignment">slice = 0, remaining_A[IDX_AckHandler_A] = remaining_A[IDX_AckHandler_A] - 1</label>
    </transition>
    <transition>
      <source ref="AckHandler_A_Exec" />
      <target ref="AckHandler_A_Idle" />
      <label kind="guard">running_A == IDX_AckHandler_A &amp;&amp; remaining_A[IDX_AckHandler_A] == 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">done_AckHandler_A!</label>
      <label kind="assignment">x = 0, slice = 0</label>
    </transition>
    <transition>
      <source ref="AckHandler_A_Exec" />
      <target ref="AckHandler_A_Ready" />
      <label kind="guard">running_A == IDX_AckHandler_A &amp;&amp; remaining_A[IDX_AckHandler_A] &gt; 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">preempt_AckHandler_A?</label>
      <label kind="assignment">ready_A[IDX_AckHandler_A] = true</label>
    </transition>
    <transition>
      <source ref="AckHandler_A_Ready" />
      <target ref="AckHandler_A_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
    <transition>
      <source ref="AckHandler_A_Exec" />
      <target ref="AckHandler_A_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
  </template>
  <template>
    <name>Crash_B</name>
    <declaration>clock x;
clock slice;</declaration>
    <location id="Crash_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Crash_B_Ready">
      <name>Ready</name>
    </location>
    <location id="Crash_B_Exec">
      <name>Exec</name>
      <label kind="invariant">slice &lt;= 1 &amp;&amp; x &lt;= 40</label>
    </location>
    <location id="Crash_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="Crash_B_Idle" />
    <transition>
      <source ref="Crash_B_Idle" />
      <target ref="Crash_B_Ready" />
      <label kind="synchronisation">release_Crash_B?</label>
      <label kind="assignment">x = 0, slice = 0, ready_B[IDX_Crash_B] = true, remaining_B[IDX_Crash_B] = WCET_B[IDX_Crash_B]</label>
    </transition>
    <transition>
      <source ref="Crash_B_Ready" />
      <target ref="Crash_B_Exec" />
      <label kind="synchronisation">start_Crash_B?</label>
      <label kind="assignment">slice = 0</label>
    </transition>
    <transition>
      <source ref="Crash_B_Exec" />
      <target ref="Crash_B_Exec" />
      <label kind="guard">running_B == IDX_Crash_B &amp;&amp; remaining_B[IDX_Crash_B] &gt; 0 &amp;&amp; slice == 1</label>
      <label kind="assignment">slice = 0, remaining_B[IDX_Crash_B] = remaining_B[IDX_Crash_B] - 1</label>
    </transition>
    <transition>
      <source ref="Crash_B_Exec" />
      <target ref="Crash_B_Idle" />
      <label kind="guard">running_B == IDX_Crash_B &amp;&amp; remaining_B[IDX_Crash_B] == 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">done_Crash_B!</label>
      <label kind="assignment">x = 0, slice = 0</label>
    </transition>
    <transition>
      <source ref="Crash_B_Exec" />
      <target ref="Crash_B_Ready" />
      <label kind="guard">running_B == IDX_Crash_B &amp;&amp; remaining_B[IDX_Crash_B] &gt; 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">preempt_Crash_B?</label>
      <label kind="assignment">ready_B[IDX_Crash_B] = true</label>
    </transition>
    <transition>
      <source ref="Crash_B_Ready" />
      <target ref="Crash_B_DeadlineMiss" />
      <label kind="guard">x &gt; 40</label>
    </transition>
    <transition>
      <source ref="Crash_B_Exec" />
      <target ref="Crash_B_DeadlineMiss" />
      <label kind="guard">x &gt; 40</label>
    </transition>
  </template>
  <template>
    <name>PermissionReqTx_B</name>
    <declaration>clock x;
clock slice;</declaration>
    <location id="PermissionReqTx_B_Idle">
      <name>Idle</name>
    </location>
    <location id="PermissionReqTx_B_Ready">
      <name>Ready</name>
    </location>
    <location id="PermissionReqTx_B_Exec">
      <name>Exec</name>
      <label kind="invariant">slice &lt;= 1 &amp;&amp; x &lt;= 2</label>
    </location>
    <location id="PermissionReqTx_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="PermissionReqTx_B_Idle" />
    <transition>
      <source ref="PermissionReqTx_B_Idle" />
      <target ref="PermissionReqTx_B_Ready" />
      <label kind="synchronisation">release_PermissionReqTx_B?</label>
      <label kind="assignment">x = 0, slice = 0, ready_B[IDX_PermissionReqTx_B] = true, remaining_B[IDX_PermissionReqTx_B] = WCET_B[IDX_PermissionReqTx_B]</label>
    </transition>
    <transition>
      <source ref="PermissionReqTx_B_Ready" />
      <target ref="PermissionReqTx_B_Exec" />
      <label kind="synchronisation">start_PermissionReqTx_B?</label>
      <label kind="assignment">slice = 0</label>
    </transition>
    <transition>
      <source ref="PermissionReqTx_B_Exec" />
      <target ref="PermissionReqTx_B_Exec" />
      <label kind="guard">running_B == IDX_PermissionReqTx_B &amp;&amp; remaining_B[IDX_PermissionReqTx_B] &gt; 0 &amp;&amp; slice == 1</label>
      <label kind="assignment">slice = 0, remaining_B[IDX_PermissionReqTx_B] = remaining_B[IDX_PermissionReqTx_B] - 1</label>
    </transition>
    <transition>
      <source ref="PermissionReqTx_B_Exec" />
      <target ref="PermissionReqTx_B_Idle" />
      <label kind="guard">running_B == IDX_PermissionReqTx_B &amp;&amp; remaining_B[IDX_PermissionReqTx_B] == 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">done_PermissionReqTx_B!</label>
      <label kind="assignment">x = 0, slice = 0</label>
    </transition>
    <transition>
      <source ref="PermissionReqTx_B_Exec" />
      <target ref="PermissionReqTx_B_Ready" />
      <label kind="guard">running_B == IDX_PermissionReqTx_B &amp;&amp; remaining_B[IDX_PermissionReqTx_B] &gt; 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">preempt_PermissionReqTx_B?</label>
      <label kind="assignment">ready_B[IDX_PermissionReqTx_B] = true</label>
    </transition>
    <transition>
      <source ref="PermissionReqTx_B_Ready" />
      <target ref="PermissionReqTx_B_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
    <transition>
      <source ref="PermissionReqTx_B_Exec" />
      <target ref="PermissionReqTx_B_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
  </template>
  <template>
    <name>PermissionAckRx_B</name>
    <declaration>clock x;
clock slice;</declaration>
    <location id="PermissionAckRx_B_Idle">
      <name>Idle</name>
    </location>
    <location id="PermissionAckRx_B_Ready">
      <name>Ready</name>
    </location>
    <location id="PermissionAckRx_B_Exec">
      <name>Exec</name>
      <label kind="invariant">slice &lt;= 1 &amp;&amp; x &lt;= 2</label>
    </location>
    <location id="PermissionAckRx_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="PermissionAckRx_B_Idle" />
    <transition>
      <source ref="PermissionAckRx_B_Idle" />
      <target ref="PermissionAckRx_B_Ready" />
      <label kind="synchronisation">release_PermissionAckRx_B?</label>
      <label kind="assignment">x = 0, slice = 0, ready_B[IDX_PermissionAckRx_B] = true, remaining_B[IDX_PermissionAckRx_B] = WCET_B[IDX_PermissionAckRx_B]</label>
    </transition>
    <transition>
      <source ref="PermissionAckRx_B_Ready" />
      <target ref="PermissionAckRx_B_Exec" />
      <label kind="synchronisation">start_PermissionAckRx_B?</label>
      <label kind="assignment">slice = 0</label>
    </transition>
    <transition>
      <source ref="PermissionAckRx_B_Exec" />
      <target ref="PermissionAckRx_B_Exec" />
      <label kind="guard">running_B == IDX_PermissionAckRx_B &amp;&amp; remaining_B[IDX_PermissionAckRx_B] &gt; 0 &amp;&amp; slice == 1</label>
      <label kind="assignment">slice = 0, remaining_B[IDX_PermissionAckRx_B] = remaining_B[IDX_PermissionAckRx_B] - 1</label>
    </transition>
    <transition>
      <source ref="PermissionAckRx_B_Exec" />
      <target ref="PermissionAckRx_B_Idle" />
      <label kind="guard">running_B == IDX_PermissionAckRx_B &amp;&amp; remaining_B[IDX_PermissionAckRx_B] == 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">done_PermissionAckRx_B!</label>
      <label kind="assignment">x = 0, slice = 0</label>
    </transition>
    <transition>
      <source ref="PermissionAckRx_B_Exec" />
      <target ref="PermissionAckRx_B_Ready" />
      <label kind="guard">running_B == IDX_PermissionAckRx_B &amp;&amp; remaining_B[IDX_PermissionAckRx_B] &gt; 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">preempt_PermissionAckRx_B?</label>
      <label kind="assignment">ready_B[IDX_PermissionAckRx_B] = true</label>
    </transition>
    <transition>
      <source ref="PermissionAckRx_B_Ready" />
      <target ref="PermissionAckRx_B_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
    <transition>
      <source ref="PermissionAckRx_B_Exec" />
      <target ref="PermissionAckRx_B_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
  </template>
  <template>
    <name>TrajectoryPlanner_B</name>
    <declaration>clock x;
clock slice;</declaration>
    <location id="TrajectoryPlanner_B_Idle">
      <name>Idle</name>
      <label kind="invariant">x &lt;= 10</label>
    </location>
    <location id="TrajectoryPlanner_B_Ready">
      <name>Ready</name>
    </location>
    <location id="TrajectoryPlanner_B_Exec">
      <name>Exec</name>
      <label kind="invariant">slice &lt;= 1 &amp;&amp; x &lt;= 20</label>
    </location>
    <location id="TrajectoryPlanner_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="TrajectoryPlanner_B_Idle" />
    <transition>
      <source ref="TrajectoryPlanner_B_Idle" />
      <target ref="TrajectoryPlanner_B_Ready" />
      <label kind="synchronisation">release_TrajectoryPlanner_B?</label>
      <label kind="assignment">x = 0, slice = 0, ready_B[IDX_TrajectoryPlanner_B] = true, remaining_B[IDX_TrajectoryPlanner_B] = WCET_B[IDX_TrajectoryPlanner_B]</label>
    </transition>
    <transition>
      <source ref="TrajectoryPlanner_B_Ready" />
      <target ref="TrajectoryPlanner_B_Exec" />
      <label kind="synchronisation">start_TrajectoryPlanner_B?</label>
      <label kind="assignment">slice = 0</label>
    </transition>
    <transition>
      <source ref="TrajectoryPlanner_B_Exec" />
      <target ref="TrajectoryPlanner_B_Exec" />
      <label kind="guard">running_B == IDX_TrajectoryPlanner_B &amp;&amp; remaining_B[IDX_TrajectoryPlanner_B] &gt; 0 &amp;&amp; slice == 1</label>
      <label kind="assignment">slice = 0, remaining_B[IDX_TrajectoryPlanner_B] = remaining_B[IDX_TrajectoryPlanner_B] - 1</label>
    </transition>
    <transition>
      <source ref="TrajectoryPlanner_B_Exec" />
      <target ref="TrajectoryPlanner_B_Idle" />
      <label kind="guard">running_B == IDX_TrajectoryPlanner_B &amp;&amp; remaining_B[IDX_TrajectoryPlanner_B] == 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">done_TrajectoryPlanner_B!</label>
      <label kind="assignment">x = 0, slice = 0</label>
    </transition>
    <transition>
      <source ref="TrajectoryPlanner_B_Exec" />
      <target ref="TrajectoryPlanner_B_Ready" />
      <label kind="guard">running_B == IDX_TrajectoryPlanner_B &amp;&amp; remaining_B[IDX_TrajectoryPlanner_B] &gt; 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">preempt_TrajectoryPlanner_B?</label>
      <label kind="assignment">ready_B[IDX_TrajectoryPlanner_B] = true</label>
    </transition>
    <transition>
      <source ref="TrajectoryPlanner_B_Ready" />
      <target ref="TrajectoryPlanner_B_DeadlineMiss" />
      <label kind="guard">x &gt; 20</label>
    </transition>
    <transition>
      <source ref="TrajectoryPlanner_B_Exec" />
      <target ref="TrajectoryPlanner_B_DeadlineMiss" />
      <label kind="guard">x &gt; 20</label>
    </transition>
  </template>
  <template>
    <name>Controller_B</name>
    <declaration>clock x;
clock slice;</declaration>
    <location id="Controller_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Controller_B_Ready">
      <name>Ready</name>
    </location>
    <location id="Controller_B_Exec">
      <name>Exec</name>
      <label kind="invariant">slice &lt;= 1 &amp;&amp; x &lt;= 25</label>
    </location>
    <location id="Controller_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="Controller_B_Idle" />
    <transition>
      <source ref="Controller_B_Idle" />
      <target ref="Controller_B_Ready" />
      <label kind="synchronisation">release_Controller_B?</label>
      <label kind="assignment">x = 0, slice = 0, ready_B[IDX_Controller_B] = true, remaining_B[IDX_Controller_B] = WCET_B[IDX_Controller_B]</label>
    </transition>
    <transition>
      <source ref="Controller_B_Ready" />
      <target ref="Controller_B_Exec" />
      <label kind="synchronisation">start_Controller_B?</label>
      <label kind="assignment">slice = 0</label>
    </transition>
    <transition>
      <source ref="Controller_B_Exec" />
      <target ref="Controller_B_Exec" />
      <label kind="guard">running_B == IDX_Controller_B &amp;&amp; remaining_B[IDX_Controller_B] &gt; 0 &amp;&amp; slice == 1</label>
      <label kind="assignment">slice = 0, remaining_B[IDX_Controller_B] = remaining_B[IDX_Controller_B] - 1</label>
    </transition>
    <transition>
      <source ref="Controller_B_Exec" />
      <target ref="Controller_B_Idle" />
      <label kind="guard">running_B == IDX_Controller_B &amp;&amp; remaining_B[IDX_Controller_B] == 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">done_Controller_B!</label>
      <label kind="assignment">x = 0, slice = 0</label>
    </transition>
    <transition>
      <source ref="Controller_B_Exec" />
      <target ref="Controller_B_Ready" />
      <label kind="guard">running_B == IDX_Controller_B &amp;&amp; remaining_B[IDX_Controller_B] &gt; 0 &amp;&amp; slice == 0</label>
      <label kind="synchronisation">preempt_Controller_B?</label>
      <label kind="assignment">ready_B[IDX_Controller_B] = true</label>
    </transition>
    <transition>
      <source ref="Controller_B_Ready" />
      <target ref="Controller_B_DeadlineMiss" />
      <label kind="guard">x &gt; 25</label>
    </transition>
    <transition>
      <source ref="Controller_B_Exec" />
      <target ref="Controller_B_DeadlineMiss" />
      <label kind="guard">x &gt; 25</label>
    </transition>
  </template>
  <template>
    <name>Timer_InteriorLight_A</name>
    <declaration>clock t;</declaration>
    <location id="Timer_InteriorLight_A_Wait">
      <name>Wait</name>
      <label kind="invariant">t &lt;= 40</label>
    </location>
    <init ref="Timer_InteriorLight_A_Wait" />
    <transition>
      <source ref="Timer_InteriorLight_A_Wait" />
      <target ref="Timer_InteriorLight_A_Wait" />
      <label kind="guard">t == 40</label>
      <label kind="synchronisation">release_InteriorLight_A!</label>
      <label kind="assignment">t = 0</label>
    </transition>
  </template>
  <template>
    <name>Conn_PermissionReqTx_B_to_AckHandler_A</name>
    <location id="Conn_PermissionReqTx_B_to_AckHandler_A_Idle">
      <name>Idle</name>
    </location>
    <location id="Conn_PermissionReqTx_B_to_AckHandler_A_Trig">
      <name>Trig</name>
      <committed />
    </location>
    <init ref="Conn_PermissionReqTx_B_to_AckHandler_A_Idle" />
    <transition>
      <source ref="Conn_PermissionReqTx_B_to_AckHandler_A_Idle" />
      <target ref="Conn_PermissionReqTx_B_to_AckHandler_A_Trig" />
      <label kind="synchronisation">done_PermissionReqTx_B?</label>
    </transition>
    <transition>
      <source ref="Conn_PermissionReqTx_B_to_AckHandler_A_Trig" />
      <target ref="Conn_PermissionReqTx_B_to_AckHandler_A_Idle" />
      <label kind="synchronisation">release_AckHandler_A!</label>
    </transition>
  </template>
  <template>
    <name>Conn_AckHandler_A_to_PermissionAckRx_B</name>
    <location id="Conn_AckHandler_A_to_PermissionAckRx_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Conn_AckHandler_A_to_PermissionAckRx_B_Trig">
      <name>Trig</name>
      <committed />
    </location>
    <init ref="Conn_AckHandler_A_to_PermissionAckRx_B_Idle" />
    <transition>
      <source ref="Conn_AckHandler_A_to_PermissionAckRx_B_Idle" />
      <target ref="Conn_AckHandler_A_to_PermissionAckRx_B_Trig" />
      <label kind="synchronisation">done_AckHandler_A?</label>
    </transition>
    <transition>
      <source ref="Conn_AckHandler_A_to_PermissionAckRx_B_Trig" />
      <target ref="Conn_AckHandler_A_to_PermissionAckRx_B_Idle" />
      <label kind="synchronisation">release_PermissionAckRx_B!</label>
    </transition>
  </template>
  <template>
    <name>Conn_PermissionAckRx_B_to_TrajectoryPlanner_B</name>
    <location id="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Trig">
      <name>Trig</name>
      <committed />
    </location>
    <init ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Idle" />
    <transition>
      <source ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Idle" />
      <target ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Trig" />
      <label kind="synchronisation">done_PermissionAckRx_B?</label>
    </transition>
    <transition>
      <source ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Trig" />
      <target ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Idle" />
      <label kind="synchronisation">release_TrajectoryPlanner_B!</label>
    </transition>
  </template>
  <template>
    <name>Conn_TrajectoryPlanner_B_to_Controller_B</name>
    <location id="Conn_TrajectoryPlanner_B_to_Controller_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Conn_TrajectoryPlanner_B_to_Controller_B_Trig">
      <name>Trig</name>
      <committed />
    </location>
    <init ref="Conn_TrajectoryPlanner_B_to_Controller_B_Idle" />
    <transition>
      <source ref="Conn_TrajectoryPlanner_B_to_Controller_B_Idle" />
      <target ref="Conn_TrajectoryPlanner_B_to_Controller_B_Trig" />
      <label kind="synchronisation">done_TrajectoryPlanner_B?</label>
    </transition>
    <transition>
      <source ref="Conn_TrajectoryPlanner_B_to_Controller_B_Trig" />
      <target ref="Conn_TrajectoryPlanner_B_to_Controller_B_Idle" />
      <label kind="synchronisation">release_Controller_B!</label>
    </transition>
  </template>
  <template>
    <name>Env_Crash_B</name>
    <declaration>clock x;</declaration>
    <location id="Env_Crash_B_Idle">
      <name>Idle</name>
      <committed />
    </location>
    <location id="Env_Crash_B_Done">
      <name>Done</name>
    </location>
    <init ref="Env_Crash_B_Idle" />
    <transition>
      <source ref="Env_Crash_B_Idle" />
      <target ref="Env_Crash_B_Done" />
      <label kind="synchronisation">release_Crash_B!</label>
    </transition>
  </template>
  <template>
    <name>Env_PermissionReqTx_B</name>
    <declaration>clock x;</declaration>
    <location id="Env_PermissionReqTx_B_Idle">
      <name>Idle</name>
      <committed />
    </location>
    <location id="Env_PermissionReqTx_B_Done">
      <name>Done</name>
    </location>
    <init ref="Env_PermissionReqTx_B_Idle" />
    <transition>
      <source ref="Env_PermissionReqTx_B_Idle" />
      <target ref="Env_PermissionReqTx_B_Done" />
      <label kind="synchronisation">release_PermissionReqTx_B!</label>
    </transition>
  </template>
  <template>
    <name>Scheduler_A</name>
    <location id="Scheduler_A_Idle">
      <name>Idle</name>
    </location>
    <location id="Scheduler_A_Evaluate">
      <name>Evaluate</name>
      <committed />
    </location>
    <location id="Scheduler_A_Dispatch">
      <name>Dispatch</name>
      <committed />
    </location>
    <location id="Scheduler_A_Preempt">
      <name>Preempt</name>
      <committed />
    </location>
    <location id="Scheduler_A_Busy">
      <name>Busy</name>
    </location>
    <init ref="Scheduler_A_Idle" />
    <transition>
      <source ref="Scheduler_A_Idle" />
      <target ref="Scheduler_A_Evaluate" />
      <label kind="synchronisation">release_InteriorLight_A?</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Idle" />
      <target ref="Scheduler_A_Evaluate" />
      <label kind="synchronisation">release_AckHandler_A?</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Idle" />
      <target ref="Scheduler_A_Evaluate" />
      <label kind="guard">ready_A[IDX_InteriorLight_A] || ready_A[IDX_AckHandler_A]</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Evaluate" />
      <target ref="Scheduler_A_Idle" />
      <label kind="guard">running_A == -1 &amp;&amp; !(ready_A[IDX_InteriorLight_A] || ready_A[IDX_AckHandler_A])</label>
      <label kind="assignment">next_A = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Evaluate" />
      <target ref="Scheduler_A_Dispatch" />
      <label kind="guard">running_A == -1 &amp;&amp; ready_A[IDX_AckHandler_A]</label>
      <label kind="assignment">next_A = IDX_AckHandler_A</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Evaluate" />
      <target ref="Scheduler_A_Dispatch" />
      <label kind="guard">running_A == -1 &amp;&amp; ready_A[IDX_InteriorLight_A] &amp;&amp; !ready_A[IDX_AckHandler_A]</label>
      <label kind="assignment">next_A = IDX_InteriorLight_A</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Evaluate" />
      <target ref="Scheduler_A_Preempt" />
      <label kind="guard">running_A != -1 &amp;&amp; ready_A[IDX_AckHandler_A] &amp;&amp; criticality_A[IDX_AckHandler_A] &lt; thresholds_A[running_A]</label>
      <label kind="assignment">next_A = IDX_AckHandler_A</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Evaluate" />
      <target ref="Scheduler_A_Preempt" />
      <label kind="guard">running_A != -1 &amp;&amp; ready_A[IDX_InteriorLight_A] &amp;&amp; criticality_A[IDX_InteriorLight_A] &lt; thresholds_A[running_A] &amp;&amp; !ready_A[IDX_AckHandler_A]</label>
      <label kind="assignment">next_A = IDX_InteriorLight_A</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Evaluate" />
      <target ref="Scheduler_A_Busy" />
      <label kind="guard">running_A != -1 &amp;&amp; !((ready_A[IDX_InteriorLight_A] &amp;&amp; criticality_A[IDX_InteriorLight_A] &lt; thresholds_A[running_A]) || (ready_A[IDX_AckHandler_A] &amp;&amp; criticality_A[IDX_AckHandler_A] &lt; thresholds_A[running_A]))</label>
      <label kind="assignment">next_A = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Preempt" />
      <target ref="Scheduler_A_Dispatch" />
      <label kind="guard">running_A == IDX_InteriorLight_A</label>
      <label kind="synchronisation">preempt_InteriorLight_A!</label>
      <label kind="assignment">ready_A[IDX_InteriorLight_A] = true, running_A = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Preempt" />
      <target ref="Scheduler_A_Dispatch" />
      <label kind="guard">running_A == IDX_AckHandler_A</label>
      <label kind="synchronisation">preempt_AckHandler_A!</label>
      <label kind="assignment">ready_A[IDX_AckHandler_A] = true, running_A = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Dispatch" />
      <target ref="Scheduler_A_Busy" />
      <label kind="guard">next_A == IDX_InteriorLight_A</label>
      <label kind="synchronisation">start_InteriorLight_A!</label>
      <label kind="assignment">running_A = IDX_InteriorLight_A, ready_A[IDX_InteriorLight_A] = false, next_A = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Dispatch" />
      <target ref="Scheduler_A_Busy" />
      <label kind="guard">next_A == IDX_AckHandler_A</label>
      <label kind="synchronisation">start_AckHandler_A!</label>
      <label kind="assignment">running_A = IDX_AckHandler_A, ready_A[IDX_AckHandler_A] = false, next_A = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Busy" />
      <target ref="Scheduler_A_Evaluate" />
      <label kind="synchronisation">release_InteriorLight_A?</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Busy" />
      <target ref="Scheduler_A_Evaluate" />
      <label kind="synchronisation">release_AckHandler_A?</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Busy" />
      <target ref="Scheduler_A_Evaluate" />
      <label kind="synchronisation">done_InteriorLight_A?</label>
      <label kind="guard">running_A == IDX_InteriorLight_A</label>
      <label kind="assignment">running_A = -1, next_A = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Busy" />
      <target ref="Scheduler_A_Evaluate" />
      <label kind="synchronisation">done_AckHandler_A?</label>
      <label kind="guard">running_A == IDX_AckHandler_A</label>
      <label kind="assignment">running_A = -1, next_A = -1</label>
    </transition>
  </template>
  <template>
    <name>Scheduler_B</name>
    <location id="Scheduler_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Scheduler_B_Evaluate">
      <name>Evaluate</name>
      <committed />
    </location>
    <location id="Scheduler_B_Dispatch">
      <name>Dispatch</name>
      <committed />
    </location>
    <location id="Scheduler_B_Preempt">
      <name>Preempt</name>
      <committed />
    </location>
    <location id="Scheduler_B_Busy">
      <name>Busy</name>
    </location>
    <init ref="Scheduler_B_Idle" />
    <transition>
      <source ref="Scheduler_B_Idle" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">release_Crash_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Idle" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">release_PermissionReqTx_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Idle" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">release_PermissionAckRx_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Idle" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">release_TrajectoryPlanner_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Idle" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">release_Controller_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Idle" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="guard">ready_B[IDX_Crash_B] || ready_B[IDX_PermissionReqTx_B] || ready_B[IDX_PermissionAckRx_B] || ready_B[IDX_TrajectoryPlanner_B] || ready_B[IDX_Controller_B]</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Evaluate" />
      <target ref="Scheduler_B_Idle" />
      <label kind="guard">running_B == -1 &amp;&amp; !(ready_B[IDX_Crash_B] || ready_B[IDX_PermissionReqTx_B] || ready_B[IDX_PermissionAckRx_B] || ready_B[IDX_TrajectoryPlanner_B] || ready_B[IDX_Controller_B])</label>
      <label kind="assignment">next_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Evaluate" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="guard">running_B == -1 &amp;&amp; ready_B[IDX_Crash_B]</label>
      <label kind="assignment">next_B = IDX_Crash_B</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Evaluate" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="guard">running_B == -1 &amp;&amp; ready_B[IDX_PermissionReqTx_B] &amp;&amp; !ready_B[IDX_Crash_B]</label>
      <label kind="assignment">next_B = IDX_PermissionReqTx_B</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Evaluate" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="guard">running_B == -1 &amp;&amp; ready_B[IDX_PermissionAckRx_B] &amp;&amp; !ready_B[IDX_Crash_B] &amp;&amp; !ready_B[IDX_PermissionReqTx_B]</label>
      <label kind="assignment">next_B = IDX_PermissionAckRx_B</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Evaluate" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="guard">running_B == -1 &amp;&amp; ready_B[IDX_TrajectoryPlanner_B] &amp;&amp; !ready_B[IDX_Crash_B] &amp;&amp; !ready_B[IDX_PermissionReqTx_B] &amp;&amp; !ready_B[IDX_PermissionAckRx_B]</label>
      <label kind="assignment">next_B = IDX_TrajectoryPlanner_B</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Evaluate" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="guard">running_B == -1 &amp;&amp; ready_B[IDX_Controller_B] &amp;&amp; !ready_B[IDX_Crash_B] &amp;&amp; !ready_B[IDX_PermissionReqTx_B] &amp;&amp; !ready_B[IDX_PermissionAckRx_B] &amp;&amp; !ready_B[IDX_TrajectoryPlanner_B]</label>
      <label kind="assignment">next_B = IDX_Controller_B</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Evaluate" />
      <target ref="Scheduler_B_Preempt" />
      <label kind="guard">running_B != -1 &amp;&amp; ready_B[IDX_Crash_B] &amp;&amp; criticality_B[IDX_Crash_B] &lt; thresholds_B[running_B]</label>
      <label kind="assignment">next_B = IDX_Crash_B</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Evaluate" />
      <target ref="Scheduler_B_Preempt" />
      <label kind="guard">running_B != -1 &amp;&amp; ready_B[IDX_PermissionReqTx_B] &amp;&amp; criticality_B[IDX_PermissionReqTx_B] &lt; thresholds_B[running_B] &amp;&amp; !ready_B[IDX_Crash_B]</label>
      <label kind="assignment">next_B = IDX_PermissionReqTx_B</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Evaluate" />
      <target ref="Scheduler_B_Preempt" />
      <label kind="guard">running_B != -1 &amp;&amp; ready_B[IDX_PermissionAckRx_B] &amp;&amp; criticality_B[IDX_PermissionAckRx_B] &lt; thresholds_B[running_B] &amp;&amp; !ready_B[IDX_Crash_B] &amp;&amp; !ready_B[IDX_PermissionReqTx_B]</label>
      <label kind="assignment">next_B = IDX_PermissionAckRx_B</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Evaluate" />
      <target ref="Scheduler_B_Preempt" />
      <label kind="guard">running_B != -1 &amp;&amp; ready_B[IDX_TrajectoryPlanner_B] &amp;&amp; criticality_B[IDX_TrajectoryPlanner_B] &lt; thresholds_B[running_B] &amp;&amp; !ready_B[IDX_Crash_B] &amp;&amp; !ready_B[IDX_PermissionReqTx_B] &amp;&amp; !ready_B[IDX_PermissionAckRx_B]</label>
      <label kind="assignment">next_B = IDX_TrajectoryPlanner_B</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Evaluate" />
      <target ref="Scheduler_B_Preempt" />
      <label kind="guard">running_B != -1 &amp;&amp; ready_B[IDX_Controller_B] &amp;&amp; criticality_B[IDX_Controller_B] &lt; thresholds_B[running_B] &amp;&amp; !ready_B[IDX_Crash_B] &amp;&amp; !ready_B[IDX_PermissionReqTx_B] &amp;&amp; !ready_B[IDX_PermissionAckRx_B] &amp;&amp; !ready_B[IDX_TrajectoryPlanner_B]</label>
      <label kind="assignment">next_B = IDX_Controller_B</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Evaluate" />
      <target ref="Scheduler_B_Busy" />
      <label kind="guard">running_B != -1 &amp;&amp; !((ready_B[IDX_Crash_B] &amp;&amp; criticality_B[IDX_Crash_B] &lt; thresholds_B[running_B]) || (ready_B[IDX_PermissionReqTx_B] &amp;&amp; criticality_B[IDX_PermissionReqTx_B] &lt; thresholds_B[running_B]) || (ready_B[IDX_PermissionAckRx_B] &amp;&amp; criticality_B[IDX_PermissionAckRx_B] &lt; thresholds_B[running_B]) || (ready_B[IDX_TrajectoryPlanner_B] &amp;&amp; criticality_B[IDX_TrajectoryPlanner_B] &lt; thresholds_B[running_B]) || (ready_B[IDX_Controller_B] &amp;&amp; criticality_B[IDX_Controller_B] &lt; thresholds_B[running_B]))</label>
      <label kind="assignment">next_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Preempt" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="guard">running_B == IDX_Crash_B</label>
      <label kind="synchronisation">preempt_Crash_B!</label>
      <label kind="assignment">ready_B[IDX_Crash_B] = true, running_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Preempt" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="guard">running_B == IDX_PermissionReqTx_B</label>
      <label kind="synchronisation">preempt_PermissionReqTx_B!</label>
      <label kind="assignment">ready_B[IDX_PermissionReqTx_B] = true, running_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Preempt" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="guard">running_B == IDX_PermissionAckRx_B</label>
      <label kind="synchronisation">preempt_PermissionAckRx_B!</label>
      <label kind="assignment">ready_B[IDX_PermissionAckRx_B] = true, running_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Preempt" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="guard">running_B == IDX_TrajectoryPlanner_B</label>
      <label kind="synchronisation">preempt_TrajectoryPlanner_B!</label>
      <label kind="assignment">ready_B[IDX_TrajectoryPlanner_B] = true, running_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Preempt" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="guard">running_B == IDX_Controller_B</label>
      <label kind="synchronisation">preempt_Controller_B!</label>
      <label kind="assignment">ready_B[IDX_Controller_B] = true, running_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Dispatch" />
      <target ref="Scheduler_B_Busy" />
      <label kind="guard">next_B == IDX_Crash_B</label>
      <label kind="synchronisation">start_Crash_B!</label>
      <label kind="assignment">running_B = IDX_Crash_B, ready_B[IDX_Crash_B] = false, next_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Dispatch" />
      <target ref="Scheduler_B_Busy" />
      <label kind="guard">next_B == IDX_PermissionReqTx_B</label>
      <label kind="synchronisation">start_PermissionReqTx_B!</label>
      <label kind="assignment">running_B = IDX_PermissionReqTx_B, ready_B[IDX_PermissionReqTx_B] = false, next_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Dispatch" />
      <target ref="Scheduler_B_Busy" />
      <label kind="guard">next_B == IDX_PermissionAckRx_B</label>
      <label kind="synchronisation">start_PermissionAckRx_B!</label>
      <label kind="assignment">running_B = IDX_PermissionAckRx_B, ready_B[IDX_PermissionAckRx_B] = false, next_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Dispatch" />
      <target ref="Scheduler_B_Busy" />
      <label kind="guard">next_B == IDX_TrajectoryPlanner_B</label>
      <label kind="synchronisation">start_TrajectoryPlanner_B!</label>
      <label kind="assignment">running_B = IDX_TrajectoryPlanner_B, ready_B[IDX_TrajectoryPlanner_B] = false, next_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Dispatch" />
      <target ref="Scheduler_B_Busy" />
      <label kind="guard">next_B == IDX_Controller_B</label>
      <label kind="synchronisation">start_Controller_B!</label>
      <label kind="assignment">running_B = IDX_Controller_B, ready_B[IDX_Controller_B] = false, next_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">release_Crash_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">release_PermissionReqTx_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">release_PermissionAckRx_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">release_TrajectoryPlanner_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">release_Controller_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">done_Crash_B?</label>
      <label kind="guard">running_B == IDX_Crash_B</label>
      <label kind="assignment">running_B = -1, next_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">done_PermissionReqTx_B?</label>
      <label kind="guard">running_B == IDX_PermissionReqTx_B</label>
      <label kind="assignment">running_B = -1, next_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">done_PermissionAckRx_B?</label>
      <label kind="guard">running_B == IDX_PermissionAckRx_B</label>
      <label kind="assignment">running_B = -1, next_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">done_TrajectoryPlanner_B?</label>
      <label kind="guard">running_B == IDX_TrajectoryPlanner_B</label>
      <label kind="assignment">running_B = -1, next_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Evaluate" />
      <label kind="synchronisation">done_Controller_B?</label>
      <label kind="guard">running_B == IDX_Controller_B</label>
      <label kind="assignment">running_B = -1, next_B = -1</label>
    </transition>
  </template>
  <system>
    P_InteriorLight_A = InteriorLight_A();
    P_AckHandler_A = AckHandler_A();
    P_Crash_B = Crash_B();
    P_PermissionReqTx_B = PermissionReqTx_B();
    P_PermissionAckRx_B = PermissionAckRx_B();
    P_TrajectoryPlanner_B = TrajectoryPlanner_B();
    P_Controller_B = Controller_B();
    T_InteriorLight_A = Timer_InteriorLight_A();
    D_Conn_PermissionReqTx_B_to_AckHandler_A = Conn_PermissionReqTx_B_to_AckHandler_A();
    D_Conn_AckHandler_A_to_PermissionAckRx_B = Conn_AckHandler_A_to_PermissionAckRx_B();
    D_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B = Conn_PermissionAckRx_B_to_TrajectoryPlanner_B();
    D_Conn_TrajectoryPlanner_B_to_Controller_B = Conn_TrajectoryPlanner_B_to_Controller_B();
    I_Env_Crash_B = Env_Crash_B();
    I_Env_PermissionReqTx_B = Env_PermissionReqTx_B();
    S_A = Scheduler_A();
    S_B = Scheduler_B();
    system P_InteriorLight_A, P_AckHandler_A, P_Crash_B, P_PermissionReqTx_B, P_PermissionAckRx_B, P_TrajectoryPlanner_B, P_Controller_B, T_InteriorLight_A, D_Conn_PermissionReqTx_B_to_AckHandler_A, D_Conn_AckHandler_A_to_PermissionAckRx_B, D_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B, D_Conn_TrajectoryPlanner_B_to_Controller_B, I_Env_Crash_B, I_Env_PermissionReqTx_B, S_A, S_B;
  </system>
</nta>