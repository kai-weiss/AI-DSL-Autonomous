<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC "-//Uppaal Team//DTD Flat System 1.5//EN" "http://www.it.uu.se/research/group/darts/uppaal/flat-1_5.dtd">
<nta>
  <declaration>
    broadcast chan start_Perception_A, done_Perception_A;
    broadcast chan start_AckHandler_A, done_AckHandler_A;
    broadcast chan start_Perception_B, done_Perception_B;
    broadcast chan start_PermissionReqTx_B, done_PermissionReqTx_B;
    broadcast chan start_PermissionAckRx_B, done_PermissionAckRx_B;
    broadcast chan start_TrajectoryPlanner_B, done_TrajectoryPlanner_B;
    broadcast chan start_Controller_B, done_Controller_B;
    broadcast chan release_Perception_A;
    broadcast chan release_AckHandler_A;
    broadcast chan release_Perception_B;
    broadcast chan release_PermissionReqTx_B;
    broadcast chan release_PermissionAckRx_B;
    broadcast chan release_TrajectoryPlanner_B;
    broadcast chan release_Controller_B;
    const int NUM_COMPONENTS_A = 2;
    const int IDX_Perception_A = 0;
    const int IDX_AckHandler_A = 1;
    int priorities_A[NUM_COMPONENTS_A] = {1, 1};
    bool ready_A[NUM_COMPONENTS_A];
    int running_A = -1;
    const int NUM_COMPONENTS_B = 5;
    const int IDX_Perception_B = 0;
    const int IDX_PermissionReqTx_B = 1;
    const int IDX_PermissionAckRx_B = 2;
    const int IDX_TrajectoryPlanner_B = 3;
    const int IDX_Controller_B = 4;
    int priorities_B[NUM_COMPONENTS_B] = {1, 1, 1, 1, 1};
    bool ready_B[NUM_COMPONENTS_B];
    int running_B = -1;
  </declaration>
  <template>
    <name>Perception_A</name>
    <declaration>clock x;
clock e;</declaration>
    <location id="Perception_A_Idle">
      <name>Idle</name>
      <label kind="invariant">x &lt;= 40</label>
    </location>
    <location id="Perception_A_Ready">
      <name>Ready</name>
    </location>
    <location id="Perception_A_Exec">
      <name>Exec</name>
      <label kind="invariant">e &lt;= 10 &amp;&amp; x &lt;= 40</label>
    </location>
    <location id="Perception_A_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="Perception_A_Idle" />
    <transition>
      <source ref="Perception_A_Idle" />
      <target ref="Perception_A_Ready" />
      <label kind="synchronisation">release_Perception_A?</label>
      <label kind="assignment">x = 0, ready_A[0] = true</label>
    </transition>
    <transition>
      <source ref="Perception_A_Ready" />
      <target ref="Perception_A_Exec" />
      <label kind="synchronisation">start_Perception_A?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="Perception_A_Exec" />
      <target ref="Perception_A_Idle" />
      <label kind="guard">e == 10</label>
      <label kind="synchronisation">done_Perception_A!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="Perception_A_Ready" />
      <target ref="Perception_A_DeadlineMiss" />
      <label kind="guard">x &gt; 40</label>
    </transition>
    <transition>
      <source ref="Perception_A_Exec" />
      <target ref="Perception_A_DeadlineMiss" />
      <label kind="guard">x &gt; 40</label>
    </transition>
  </template>
  <template>
    <name>AckHandler_A</name>
    <declaration>clock x;
clock e;</declaration>
    <location id="AckHandler_A_Idle">
      <name>Idle</name>
    </location>
    <location id="AckHandler_A_Ready">
      <name>Ready</name>
    </location>
    <location id="AckHandler_A_Exec">
      <name>Exec</name>
      <label kind="invariant">e &lt;= 2 &amp;&amp; x &lt;= 2</label>
    </location>
    <location id="AckHandler_A_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="AckHandler_A_Idle" />
    <transition>
      <source ref="AckHandler_A_Idle" />
      <target ref="AckHandler_A_Ready" />
      <label kind="synchronisation">release_AckHandler_A?</label>
      <label kind="assignment">x = 0, ready_A[1] = true</label>
    </transition>
    <transition>
      <source ref="AckHandler_A_Ready" />
      <target ref="AckHandler_A_Exec" />
      <label kind="synchronisation">start_AckHandler_A?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="AckHandler_A_Exec" />
      <target ref="AckHandler_A_Idle" />
      <label kind="guard">e == 2</label>
      <label kind="synchronisation">done_AckHandler_A!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="AckHandler_A_Ready" />
      <target ref="AckHandler_A_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
    <transition>
      <source ref="AckHandler_A_Exec" />
      <target ref="AckHandler_A_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
  </template>
  <template>
    <name>Perception_B</name>
    <declaration>clock x;
clock e;</declaration>
    <location id="Perception_B_Idle">
      <name>Idle</name>
      <label kind="invariant">x &lt;= 40</label>
    </location>
    <location id="Perception_B_Ready">
      <name>Ready</name>
    </location>
    <location id="Perception_B_Exec">
      <name>Exec</name>
      <label kind="invariant">e &lt;= 10 &amp;&amp; x &lt;= 40</label>
    </location>
    <location id="Perception_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="Perception_B_Idle" />
    <transition>
      <source ref="Perception_B_Idle" />
      <target ref="Perception_B_Ready" />
      <label kind="synchronisation">release_Perception_B?</label>
      <label kind="assignment">x = 0, ready_B[0] = true</label>
    </transition>
    <transition>
      <source ref="Perception_B_Ready" />
      <target ref="Perception_B_Exec" />
      <label kind="synchronisation">start_Perception_B?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="Perception_B_Exec" />
      <target ref="Perception_B_Idle" />
      <label kind="guard">e == 10</label>
      <label kind="synchronisation">done_Perception_B!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="Perception_B_Ready" />
      <target ref="Perception_B_DeadlineMiss" />
      <label kind="guard">x &gt; 40</label>
    </transition>
    <transition>
      <source ref="Perception_B_Exec" />
      <target ref="Perception_B_DeadlineMiss" />
      <label kind="guard">x &gt; 40</label>
    </transition>
  </template>
  <template>
    <name>PermissionReqTx_B</name>
    <declaration>clock x;
clock e;</declaration>
    <location id="PermissionReqTx_B_Idle">
      <name>Idle</name>
    </location>
    <location id="PermissionReqTx_B_Ready">
      <name>Ready</name>
    </location>
    <location id="PermissionReqTx_B_Exec">
      <name>Exec</name>
      <label kind="invariant">e &lt;= 2 &amp;&amp; x &lt;= 2</label>
    </location>
    <location id="PermissionReqTx_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="PermissionReqTx_B_Idle" />
    <transition>
      <source ref="PermissionReqTx_B_Idle" />
      <target ref="PermissionReqTx_B_Ready" />
      <label kind="synchronisation">release_PermissionReqTx_B?</label>
      <label kind="assignment">x = 0, ready_B[1] = true</label>
    </transition>
    <transition>
      <source ref="PermissionReqTx_B_Ready" />
      <target ref="PermissionReqTx_B_Exec" />
      <label kind="synchronisation">start_PermissionReqTx_B?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="PermissionReqTx_B_Exec" />
      <target ref="PermissionReqTx_B_Idle" />
      <label kind="guard">e == 2</label>
      <label kind="synchronisation">done_PermissionReqTx_B!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="PermissionReqTx_B_Ready" />
      <target ref="PermissionReqTx_B_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
    <transition>
      <source ref="PermissionReqTx_B_Exec" />
      <target ref="PermissionReqTx_B_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
  </template>
  <template>
    <name>PermissionAckRx_B</name>
    <declaration>clock x;
clock e;</declaration>
    <location id="PermissionAckRx_B_Idle">
      <name>Idle</name>
    </location>
    <location id="PermissionAckRx_B_Ready">
      <name>Ready</name>
    </location>
    <location id="PermissionAckRx_B_Exec">
      <name>Exec</name>
      <label kind="invariant">e &lt;= 2 &amp;&amp; x &lt;= 2</label>
    </location>
    <location id="PermissionAckRx_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="PermissionAckRx_B_Idle" />
    <transition>
      <source ref="PermissionAckRx_B_Idle" />
      <target ref="PermissionAckRx_B_Ready" />
      <label kind="synchronisation">release_PermissionAckRx_B?</label>
      <label kind="assignment">x = 0, ready_B[2] = true</label>
    </transition>
    <transition>
      <source ref="PermissionAckRx_B_Ready" />
      <target ref="PermissionAckRx_B_Exec" />
      <label kind="synchronisation">start_PermissionAckRx_B?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="PermissionAckRx_B_Exec" />
      <target ref="PermissionAckRx_B_Idle" />
      <label kind="guard">e == 2</label>
      <label kind="synchronisation">done_PermissionAckRx_B!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="PermissionAckRx_B_Ready" />
      <target ref="PermissionAckRx_B_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
    <transition>
      <source ref="PermissionAckRx_B_Exec" />
      <target ref="PermissionAckRx_B_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
  </template>
  <template>
    <name>TrajectoryPlanner_B</name>
    <declaration>clock x;
clock e;</declaration>
    <location id="TrajectoryPlanner_B_Idle">
      <name>Idle</name>
      <label kind="invariant">x &lt;= 10</label>
    </location>
    <location id="TrajectoryPlanner_B_Ready">
      <name>Ready</name>
    </location>
    <location id="TrajectoryPlanner_B_Exec">
      <name>Exec</name>
      <label kind="invariant">e &lt;= 10 &amp;&amp; x &lt;= 20</label>
    </location>
    <location id="TrajectoryPlanner_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="TrajectoryPlanner_B_Idle" />
    <transition>
      <source ref="TrajectoryPlanner_B_Idle" />
      <target ref="TrajectoryPlanner_B_Ready" />
      <label kind="synchronisation">release_TrajectoryPlanner_B?</label>
      <label kind="assignment">x = 0, ready_B[3] = true</label>
    </transition>
    <transition>
      <source ref="TrajectoryPlanner_B_Ready" />
      <target ref="TrajectoryPlanner_B_Exec" />
      <label kind="synchronisation">start_TrajectoryPlanner_B?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="TrajectoryPlanner_B_Exec" />
      <target ref="TrajectoryPlanner_B_Idle" />
      <label kind="guard">e == 10</label>
      <label kind="synchronisation">done_TrajectoryPlanner_B!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="TrajectoryPlanner_B_Ready" />
      <target ref="TrajectoryPlanner_B_DeadlineMiss" />
      <label kind="guard">x &gt; 20</label>
    </transition>
    <transition>
      <source ref="TrajectoryPlanner_B_Exec" />
      <target ref="TrajectoryPlanner_B_DeadlineMiss" />
      <label kind="guard">x &gt; 20</label>
    </transition>
  </template>
  <template>
    <name>Controller_B</name>
    <declaration>clock x;
clock e;</declaration>
    <location id="Controller_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Controller_B_Ready">
      <name>Ready</name>
    </location>
    <location id="Controller_B_Exec">
      <name>Exec</name>
      <label kind="invariant">e &lt;= 25 &amp;&amp; x &lt;= 25</label>
    </location>
    <location id="Controller_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="Controller_B_Idle" />
    <transition>
      <source ref="Controller_B_Idle" />
      <target ref="Controller_B_Ready" />
      <label kind="synchronisation">release_Controller_B?</label>
      <label kind="assignment">x = 0, ready_B[4] = true</label>
    </transition>
    <transition>
      <source ref="Controller_B_Ready" />
      <target ref="Controller_B_Exec" />
      <label kind="synchronisation">start_Controller_B?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="Controller_B_Exec" />
      <target ref="Controller_B_Idle" />
      <label kind="guard">e == 25</label>
      <label kind="synchronisation">done_Controller_B!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="Controller_B_Ready" />
      <target ref="Controller_B_DeadlineMiss" />
      <label kind="guard">x &gt; 25</label>
    </transition>
    <transition>
      <source ref="Controller_B_Exec" />
      <target ref="Controller_B_DeadlineMiss" />
      <label kind="guard">x &gt; 25</label>
    </transition>
  </template>
  <template>
    <name>Timer_Perception_A</name>
    <declaration>clock t;</declaration>
    <location id="Timer_Perception_A_Wait">
      <name>Wait</name>
      <label kind="invariant">t &lt;= 40</label>
    </location>
    <init ref="Timer_Perception_A_Wait" />
    <transition>
      <source ref="Timer_Perception_A_Wait" />
      <target ref="Timer_Perception_A_Wait" />
      <label kind="guard">t == 40</label>
      <label kind="synchronisation">release_Perception_A!</label>
      <label kind="assignment">t = 0</label>
    </transition>
  </template>
  <template>
    <name>Timer_Perception_B</name>
    <declaration>clock t;</declaration>
    <location id="Timer_Perception_B_Wait">
      <name>Wait</name>
      <label kind="invariant">t &lt;= 40</label>
    </location>
    <init ref="Timer_Perception_B_Wait" />
    <transition>
      <source ref="Timer_Perception_B_Wait" />
      <target ref="Timer_Perception_B_Wait" />
      <label kind="guard">t == 40</label>
      <label kind="synchronisation">release_Perception_B!</label>
      <label kind="assignment">t = 0</label>
    </transition>
  </template>
  <template>
    <name>Conn_PermissionReqTx_B_to_AckHandler_A</name>
    <location id="Conn_PermissionReqTx_B_to_AckHandler_A_Idle">
      <name>Idle</name>
    </location>
    <location id="Conn_PermissionReqTx_B_to_AckHandler_A_Trig">
      <name>Trig</name>
      <committed />
    </location>
    <init ref="Conn_PermissionReqTx_B_to_AckHandler_A_Idle" />
    <transition>
      <source ref="Conn_PermissionReqTx_B_to_AckHandler_A_Idle" />
      <target ref="Conn_PermissionReqTx_B_to_AckHandler_A_Trig" />
      <label kind="synchronisation">done_PermissionReqTx_B?</label>
    </transition>
    <transition>
      <source ref="Conn_PermissionReqTx_B_to_AckHandler_A_Trig" />
      <target ref="Conn_PermissionReqTx_B_to_AckHandler_A_Idle" />
      <label kind="synchronisation">release_AckHandler_A!</label>
    </transition>
  </template>
  <template>
    <name>Conn_AckHandler_A_to_PermissionAckRx_B</name>
    <location id="Conn_AckHandler_A_to_PermissionAckRx_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Conn_AckHandler_A_to_PermissionAckRx_B_Trig">
      <name>Trig</name>
      <committed />
    </location>
    <init ref="Conn_AckHandler_A_to_PermissionAckRx_B_Idle" />
    <transition>
      <source ref="Conn_AckHandler_A_to_PermissionAckRx_B_Idle" />
      <target ref="Conn_AckHandler_A_to_PermissionAckRx_B_Trig" />
      <label kind="synchronisation">done_AckHandler_A?</label>
    </transition>
    <transition>
      <source ref="Conn_AckHandler_A_to_PermissionAckRx_B_Trig" />
      <target ref="Conn_AckHandler_A_to_PermissionAckRx_B_Idle" />
      <label kind="synchronisation">release_PermissionAckRx_B!</label>
    </transition>
  </template>
  <template>
    <name>Conn_PermissionAckRx_B_to_TrajectoryPlanner_B</name>
    <location id="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Trig">
      <name>Trig</name>
      <committed />
    </location>
    <init ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Idle" />
    <transition>
      <source ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Idle" />
      <target ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Trig" />
      <label kind="synchronisation">done_PermissionAckRx_B?</label>
    </transition>
    <transition>
      <source ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Trig" />
      <target ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Idle" />
      <label kind="synchronisation">release_TrajectoryPlanner_B!</label>
    </transition>
  </template>
  <template>
    <name>Conn_TrajectoryPlanner_B_to_Controller_B</name>
    <location id="Conn_TrajectoryPlanner_B_to_Controller_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Conn_TrajectoryPlanner_B_to_Controller_B_Trig">
      <name>Trig</name>
      <committed />
    </location>
    <init ref="Conn_TrajectoryPlanner_B_to_Controller_B_Idle" />
    <transition>
      <source ref="Conn_TrajectoryPlanner_B_to_Controller_B_Idle" />
      <target ref="Conn_TrajectoryPlanner_B_to_Controller_B_Trig" />
      <label kind="synchronisation">done_TrajectoryPlanner_B?</label>
    </transition>
    <transition>
      <source ref="Conn_TrajectoryPlanner_B_to_Controller_B_Trig" />
      <target ref="Conn_TrajectoryPlanner_B_to_Controller_B_Idle" />
      <label kind="synchronisation">release_Controller_B!</label>
    </transition>
  </template>
  <template>
    <name>Env_PermissionReqTx_B</name>
    <declaration>clock x;</declaration>
    <location id="Env_PermissionReqTx_B_Idle">
      <name>Idle</name>
      <committed />
    </location>
    <location id="Env_PermissionReqTx_B_Done">
      <name>Done</name>
    </location>
    <init ref="Env_PermissionReqTx_B_Idle" />
    <transition>
      <source ref="Env_PermissionReqTx_B_Idle" />
      <target ref="Env_PermissionReqTx_B_Done" />
      <label kind="synchronisation">release_PermissionReqTx_B!</label>
    </transition>
  </template>
  <template>
    <name>Scheduler_A</name>
    <location id="Scheduler_A_Idle">
      <name>Idle</name>
    </location>
    <location id="Scheduler_A_Dispatch">
      <name>Dispatch</name>
      <committed />
    </location>
    <location id="Scheduler_A_Post">
      <name>Post</name>
      <committed />
    </location>
    <location id="Scheduler_A_Busy">
      <name>Busy</name>
    </location>
    <init ref="Scheduler_A_Idle" />
    <transition>
      <source ref="Scheduler_A_Idle" />
      <target ref="Scheduler_A_Dispatch" />
      <label kind="synchronisation">release_Perception_A?</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Idle" />
      <target ref="Scheduler_A_Dispatch" />
      <label kind="synchronisation">release_AckHandler_A?</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Dispatch" />
      <target ref="Scheduler_A_Busy" />
      <label kind="guard">running_A == -1 &amp;&amp; ready_A[IDX_AckHandler_A]</label>
      <label kind="synchronisation">start_AckHandler_A!</label>
      <label kind="assignment">running_A = IDX_AckHandler_A, ready_A[IDX_AckHandler_A] = false</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Dispatch" />
      <target ref="Scheduler_A_Busy" />
      <label kind="guard">running_A == -1 &amp;&amp; ready_A[IDX_Perception_A] &amp;&amp; !ready_A[IDX_AckHandler_A]</label>
      <label kind="synchronisation">start_Perception_A!</label>
      <label kind="assignment">running_A = IDX_Perception_A, ready_A[IDX_Perception_A] = false</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Dispatch" />
      <target ref="Scheduler_A_Idle" />
      <label kind="guard">!(ready_A[IDX_Perception_A] || ready_A[IDX_AckHandler_A])</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Busy" />
      <target ref="Scheduler_A_Post" />
      <label kind="synchronisation">done_Perception_A?</label>
      <label kind="guard">running_A == IDX_Perception_A</label>
      <label kind="assignment">running_A = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Busy" />
      <target ref="Scheduler_A_Post" />
      <label kind="synchronisation">done_AckHandler_A?</label>
      <label kind="guard">running_A == IDX_AckHandler_A</label>
      <label kind="assignment">running_A = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Post" />
      <target ref="Scheduler_A_Dispatch" />
      <label kind="guard">ready_A[IDX_Perception_A] || ready_A[IDX_AckHandler_A]</label>
    </transition>
    <transition>
      <source ref="Scheduler_A_Post" />
      <target ref="Scheduler_A_Idle" />
      <label kind="guard">!(ready_A[IDX_Perception_A] || ready_A[IDX_AckHandler_A])</label>
    </transition>
  </template>
  <template>
    <name>Scheduler_B</name>
    <location id="Scheduler_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Scheduler_B_Dispatch">
      <name>Dispatch</name>
      <committed />
    </location>
    <location id="Scheduler_B_Post">
      <name>Post</name>
      <committed />
    </location>
    <location id="Scheduler_B_Busy">
      <name>Busy</name>
    </location>
    <init ref="Scheduler_B_Idle" />
    <transition>
      <source ref="Scheduler_B_Idle" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="synchronisation">release_Perception_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Idle" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="synchronisation">release_PermissionReqTx_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Idle" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="synchronisation">release_PermissionAckRx_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Idle" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="synchronisation">release_TrajectoryPlanner_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Idle" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="synchronisation">release_Controller_B?</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Dispatch" />
      <target ref="Scheduler_B_Busy" />
      <label kind="guard">running_B == -1 &amp;&amp; ready_B[IDX_Controller_B]</label>
      <label kind="synchronisation">start_Controller_B!</label>
      <label kind="assignment">running_B = IDX_Controller_B, ready_B[IDX_Controller_B] = false</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Dispatch" />
      <target ref="Scheduler_B_Busy" />
      <label kind="guard">running_B == -1 &amp;&amp; ready_B[IDX_Perception_B] &amp;&amp; !ready_B[IDX_Controller_B]</label>
      <label kind="synchronisation">start_Perception_B!</label>
      <label kind="assignment">running_B = IDX_Perception_B, ready_B[IDX_Perception_B] = false</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Dispatch" />
      <target ref="Scheduler_B_Busy" />
      <label kind="guard">running_B == -1 &amp;&amp; ready_B[IDX_PermissionAckRx_B] &amp;&amp; !ready_B[IDX_Controller_B] &amp;&amp; !ready_B[IDX_Perception_B]</label>
      <label kind="synchronisation">start_PermissionAckRx_B!</label>
      <label kind="assignment">running_B = IDX_PermissionAckRx_B, ready_B[IDX_PermissionAckRx_B] = false</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Dispatch" />
      <target ref="Scheduler_B_Busy" />
      <label kind="guard">running_B == -1 &amp;&amp; ready_B[IDX_PermissionReqTx_B] &amp;&amp; !ready_B[IDX_Controller_B] &amp;&amp; !ready_B[IDX_Perception_B] &amp;&amp; !ready_B[IDX_PermissionAckRx_B]</label>
      <label kind="synchronisation">start_PermissionReqTx_B!</label>
      <label kind="assignment">running_B = IDX_PermissionReqTx_B, ready_B[IDX_PermissionReqTx_B] = false</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Dispatch" />
      <target ref="Scheduler_B_Busy" />
      <label kind="guard">running_B == -1 &amp;&amp; ready_B[IDX_TrajectoryPlanner_B] &amp;&amp; !ready_B[IDX_Controller_B] &amp;&amp; !ready_B[IDX_Perception_B] &amp;&amp; !ready_B[IDX_PermissionAckRx_B] &amp;&amp; !ready_B[IDX_PermissionReqTx_B]</label>
      <label kind="synchronisation">start_TrajectoryPlanner_B!</label>
      <label kind="assignment">running_B = IDX_TrajectoryPlanner_B, ready_B[IDX_TrajectoryPlanner_B] = false</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Dispatch" />
      <target ref="Scheduler_B_Idle" />
      <label kind="guard">!(ready_B[IDX_Perception_B] || ready_B[IDX_PermissionReqTx_B] || ready_B[IDX_PermissionAckRx_B] || ready_B[IDX_TrajectoryPlanner_B] || ready_B[IDX_Controller_B])</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Post" />
      <label kind="synchronisation">done_Perception_B?</label>
      <label kind="guard">running_B == IDX_Perception_B</label>
      <label kind="assignment">running_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Post" />
      <label kind="synchronisation">done_PermissionReqTx_B?</label>
      <label kind="guard">running_B == IDX_PermissionReqTx_B</label>
      <label kind="assignment">running_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Post" />
      <label kind="synchronisation">done_PermissionAckRx_B?</label>
      <label kind="guard">running_B == IDX_PermissionAckRx_B</label>
      <label kind="assignment">running_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Post" />
      <label kind="synchronisation">done_TrajectoryPlanner_B?</label>
      <label kind="guard">running_B == IDX_TrajectoryPlanner_B</label>
      <label kind="assignment">running_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Busy" />
      <target ref="Scheduler_B_Post" />
      <label kind="synchronisation">done_Controller_B?</label>
      <label kind="guard">running_B == IDX_Controller_B</label>
      <label kind="assignment">running_B = -1</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Post" />
      <target ref="Scheduler_B_Dispatch" />
      <label kind="guard">ready_B[IDX_Perception_B] || ready_B[IDX_PermissionReqTx_B] || ready_B[IDX_PermissionAckRx_B] || ready_B[IDX_TrajectoryPlanner_B] || ready_B[IDX_Controller_B]</label>
    </transition>
    <transition>
      <source ref="Scheduler_B_Post" />
      <target ref="Scheduler_B_Idle" />
      <label kind="guard">!(ready_B[IDX_Perception_B] || ready_B[IDX_PermissionReqTx_B] || ready_B[IDX_PermissionAckRx_B] || ready_B[IDX_TrajectoryPlanner_B] || ready_B[IDX_Controller_B])</label>
    </transition>
  </template>
  <template>
    <name>PipeObs_EndToEndLatency</name>
    <declaration>clock t; clock e;</declaration>
    <location id="PipeObs_EndToEndLatency_Idle">
      <name>Idle</name>
    </location>
    <location id="PipeObs_EndToEndLatency_PermissionReqTx_B">
      <name>Wait_PermissionReqTx_B</name>
      <label kind="invariant">t &lt;= 27</label>
    </location>
    <location id="PipeObs_EndToEndLatency_AckHandler_A">
      <name>Wait_AckHandler_A</name>
      <label kind="invariant">t &lt;= 27</label>
    </location>
    <location id="PipeObs_EndToEndLatency_PermissionAckRx_B">
      <name>Wait_PermissionAckRx_B</name>
      <label kind="invariant">t &lt;= 27</label>
    </location>
    <location id="PipeObs_EndToEndLatency_TrajectoryPlanner_B">
      <name>Wait_TrajectoryPlanner_B</name>
      <label kind="invariant">t &lt;= 27</label>
    </location>
    <location id="PipeObs_EndToEndLatency_Controller_B">
      <name>Wait_Controller_B</name>
      <label kind="invariant">t &lt;= 27</label>
    </location>
    <location id="PipeObs_EndToEndLatency_Conn_PermissionReqTx_B_to_AckHandler_A">
      <name>Conn_PermissionReqTx_B_to_AckHandler_A</name>
      <label kind="invariant">t &lt;= 27 &amp;&amp; e &lt;= 8</label>
    </location>
    <location id="PipeObs_EndToEndLatency_Conn_AckHandler_A_to_PermissionAckRx_B">
      <name>Conn_AckHandler_A_to_PermissionAckRx_B</name>
      <label kind="invariant">t &lt;= 27 &amp;&amp; e &lt;= 8</label>
    </location>
    <location id="PipeObs_EndToEndLatency_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B">
      <name>Conn_PermissionAckRx_B_to_TrajectoryPlanner_B</name>
      <label kind="invariant">t &lt;= 27 &amp;&amp; e &lt;= 2</label>
    </location>
    <location id="PipeObs_EndToEndLatency_Conn_TrajectoryPlanner_B_to_Controller_B">
      <name>Conn_TrajectoryPlanner_B_to_Controller_B</name>
      <label kind="invariant">t &lt;= 27 &amp;&amp; e &lt;= 100</label>
    </location>
    <location id="PipeObs_EndToEndLatency_Bad">
      <name>bad</name>
    </location>
    <location id="PipeObs_EndToEndLatency_Done">
      <name>Done</name>
    </location>
    <init ref="PipeObs_EndToEndLatency_Idle" />
    <transition>
      <source ref="PipeObs_EndToEndLatency_Idle" />
      <target ref="PipeObs_EndToEndLatency_PermissionReqTx_B" />
      <label kind="synchronisation">start_PermissionReqTx_B?</label>
      <label kind="assignment">t = 0</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_PermissionReqTx_B" />
      <target ref="PipeObs_EndToEndLatency_Conn_PermissionReqTx_B_to_AckHandler_A" />
      <label kind="synchronisation">done_PermissionReqTx_B?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_PermissionReqTx_B_to_AckHandler_A" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">e == 8</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_PermissionReqTx_B_to_AckHandler_A" />
      <target ref="PipeObs_EndToEndLatency_AckHandler_A" />
      <label kind="synchronisation">start_AckHandler_A?</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_AckHandler_A" />
      <target ref="PipeObs_EndToEndLatency_Conn_AckHandler_A_to_PermissionAckRx_B" />
      <label kind="synchronisation">done_AckHandler_A?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_AckHandler_A_to_PermissionAckRx_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">e == 8</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_AckHandler_A_to_PermissionAckRx_B" />
      <target ref="PipeObs_EndToEndLatency_PermissionAckRx_B" />
      <label kind="synchronisation">start_PermissionAckRx_B?</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_PermissionAckRx_B" />
      <target ref="PipeObs_EndToEndLatency_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B" />
      <label kind="synchronisation">done_PermissionAckRx_B?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">e == 2</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B" />
      <target ref="PipeObs_EndToEndLatency_TrajectoryPlanner_B" />
      <label kind="synchronisation">start_TrajectoryPlanner_B?</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_TrajectoryPlanner_B" />
      <target ref="PipeObs_EndToEndLatency_Conn_TrajectoryPlanner_B_to_Controller_B" />
      <label kind="synchronisation">done_TrajectoryPlanner_B?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_TrajectoryPlanner_B_to_Controller_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">e == 100</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_TrajectoryPlanner_B_to_Controller_B" />
      <target ref="PipeObs_EndToEndLatency_Controller_B" />
      <label kind="synchronisation">start_Controller_B?</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Controller_B" />
      <target ref="PipeObs_EndToEndLatency_Done" />
      <label kind="synchronisation">done_Controller_B?</label>
      <label kind="guard">t &lt;= 27</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_PermissionReqTx_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 27</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_AckHandler_A" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 27</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_PermissionAckRx_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 27</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_TrajectoryPlanner_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 27</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Controller_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 27</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_PermissionReqTx_B_to_AckHandler_A" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 27</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_AckHandler_A_to_PermissionAckRx_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 27</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 27</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_TrajectoryPlanner_B_to_Controller_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 27</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Done" />
      <target ref="PipeObs_EndToEndLatency_Idle" />
    </transition>
  </template>
  <system>
    P_Perception_A = Perception_A();
    P_AckHandler_A = AckHandler_A();
    P_Perception_B = Perception_B();
    P_PermissionReqTx_B = PermissionReqTx_B();
    P_PermissionAckRx_B = PermissionAckRx_B();
    P_TrajectoryPlanner_B = TrajectoryPlanner_B();
    P_Controller_B = Controller_B();
    T_Perception_A = Timer_Perception_A();
    T_Perception_B = Timer_Perception_B();
    D_Conn_PermissionReqTx_B_to_AckHandler_A = Conn_PermissionReqTx_B_to_AckHandler_A();
    D_Conn_AckHandler_A_to_PermissionAckRx_B = Conn_AckHandler_A_to_PermissionAckRx_B();
    D_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B = Conn_PermissionAckRx_B_to_TrajectoryPlanner_B();
    D_Conn_TrajectoryPlanner_B_to_Controller_B = Conn_TrajectoryPlanner_B_to_Controller_B();
    I_Env_PermissionReqTx_B = Env_PermissionReqTx_B();
    S_A = Scheduler_A();
    S_B = Scheduler_B();
    I_PipeObs_EndToEndLatency = PipeObs_EndToEndLatency();
    system P_Perception_A, P_AckHandler_A, P_Perception_B, P_PermissionReqTx_B, P_PermissionAckRx_B, P_TrajectoryPlanner_B, P_Controller_B, T_Perception_A, T_Perception_B, D_Conn_PermissionReqTx_B_to_AckHandler_A, D_Conn_AckHandler_A_to_PermissionAckRx_B, D_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B, D_Conn_TrajectoryPlanner_B_to_Controller_B, I_Env_PermissionReqTx_B, S_A, S_B, I_PipeObs_EndToEndLatency;
  </system>
</nta>