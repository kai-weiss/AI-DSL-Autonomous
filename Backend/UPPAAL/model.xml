<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC "-//Uppaal Team//DTD Flat System 1.5//EN" "http://www.it.uu.se/research/group/darts/uppaal/flat-1_5.dtd">
<nta>
  <declaration>
    broadcast chan start_Perception_A, done_Perception_A;
    broadcast chan start_AckHandler_A, done_AckHandler_A;
    broadcast chan start_Perception_B, done_Perception_B;
    broadcast chan start_PermissionReqTx_B, done_PermissionReqTx_B;
    broadcast chan start_PermissionAckRx_B, done_PermissionAckRx_B;
    broadcast chan start_TrajectoryPlanner_B, done_TrajectoryPlanner_B;
    broadcast chan start_Controller_B, done_Controller_B;
  </declaration>
  <template>
    <name>Perception_A</name>
    <declaration>clock x;</declaration>
    <location id="Perception_A_Idle">
      <name>Idle</name>
      <label kind="invariant">x &lt;= 40</label>
    </location>
    <location id="Perception_A_Exec">
      <name>Exec</name>
      <label kind="invariant">x &lt;= 10</label>
    </location>
    <location id="Perception_A_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="Perception_A_Idle" />
    <transition>
      <source ref="Perception_A_Idle" />
      <target ref="Perception_A_Exec" />
      <label kind="guard">x == 40</label>
      <label kind="synchronisation">start_Perception_A!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="Perception_A_Exec" />
      <target ref="Perception_A_Idle" />
      <label kind="guard">x == 10</label>
      <label kind="synchronisation">done_Perception_A!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="Perception_A_Exec" />
      <target ref="Perception_A_DeadlineMiss" />
      <label kind="guard">x &gt; 40</label>
    </transition>
  </template>
  <template>
    <name>AckHandler_A</name>
    <declaration>clock x;</declaration>
    <location id="AckHandler_A_Idle">
      <name>Idle</name>
    </location>
    <location id="AckHandler_A_Exec">
      <name>Exec</name>
      <label kind="invariant">x &lt;= 2</label>
    </location>
    <location id="AckHandler_A_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="AckHandler_A_Idle" />
    <transition>
      <source ref="AckHandler_A_Idle" />
      <target ref="AckHandler_A_Exec" />
      <label kind="synchronisation">start_AckHandler_A?</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="AckHandler_A_Exec" />
      <target ref="AckHandler_A_Idle" />
      <label kind="guard">x == 2</label>
      <label kind="synchronisation">done_AckHandler_A!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="AckHandler_A_Exec" />
      <target ref="AckHandler_A_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
  </template>
  <template>
    <name>Perception_B</name>
    <declaration>clock x;</declaration>
    <location id="Perception_B_Idle">
      <name>Idle</name>
      <label kind="invariant">x &lt;= 40</label>
    </location>
    <location id="Perception_B_Exec">
      <name>Exec</name>
      <label kind="invariant">x &lt;= 10</label>
    </location>
    <location id="Perception_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="Perception_B_Idle" />
    <transition>
      <source ref="Perception_B_Idle" />
      <target ref="Perception_B_Exec" />
      <label kind="guard">x == 40</label>
      <label kind="synchronisation">start_Perception_B!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="Perception_B_Exec" />
      <target ref="Perception_B_Idle" />
      <label kind="guard">x == 10</label>
      <label kind="synchronisation">done_Perception_B!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="Perception_B_Exec" />
      <target ref="Perception_B_DeadlineMiss" />
      <label kind="guard">x &gt; 40</label>
    </transition>
  </template>
  <template>
    <name>PermissionReqTx_B</name>
    <declaration>clock x;</declaration>
    <location id="PermissionReqTx_B_Idle">
      <name>Idle</name>
    </location>
    <location id="PermissionReqTx_B_Exec">
      <name>Exec</name>
      <label kind="invariant">x &lt;= 2</label>
    </location>
    <location id="PermissionReqTx_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="PermissionReqTx_B_Idle" />
    <transition>
      <source ref="PermissionReqTx_B_Idle" />
      <target ref="PermissionReqTx_B_Exec" />
      <label kind="synchronisation">start_PermissionReqTx_B?</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="PermissionReqTx_B_Exec" />
      <target ref="PermissionReqTx_B_Idle" />
      <label kind="guard">x == 2</label>
      <label kind="synchronisation">done_PermissionReqTx_B!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="PermissionReqTx_B_Exec" />
      <target ref="PermissionReqTx_B_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
  </template>
  <template>
    <name>PermissionAckRx_B</name>
    <declaration>clock x;</declaration>
    <location id="PermissionAckRx_B_Idle">
      <name>Idle</name>
    </location>
    <location id="PermissionAckRx_B_Exec">
      <name>Exec</name>
      <label kind="invariant">x &lt;= 2</label>
    </location>
    <location id="PermissionAckRx_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="PermissionAckRx_B_Idle" />
    <transition>
      <source ref="PermissionAckRx_B_Idle" />
      <target ref="PermissionAckRx_B_Exec" />
      <label kind="synchronisation">start_PermissionAckRx_B?</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="PermissionAckRx_B_Exec" />
      <target ref="PermissionAckRx_B_Idle" />
      <label kind="guard">x == 2</label>
      <label kind="synchronisation">done_PermissionAckRx_B!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="PermissionAckRx_B_Exec" />
      <target ref="PermissionAckRx_B_DeadlineMiss" />
      <label kind="guard">x &gt; 2</label>
    </transition>
  </template>
  <template>
    <name>TrajectoryPlanner_B</name>
    <declaration>clock x;</declaration>
    <location id="TrajectoryPlanner_B_Idle">
      <name>Idle</name>
      <label kind="invariant">x &lt;= 10</label>
    </location>
    <location id="TrajectoryPlanner_B_Exec">
      <name>Exec</name>
      <label kind="invariant">x &lt;= 10</label>
    </location>
    <location id="TrajectoryPlanner_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="TrajectoryPlanner_B_Idle" />
    <transition>
      <source ref="TrajectoryPlanner_B_Idle" />
      <target ref="TrajectoryPlanner_B_Exec" />
      <label kind="guard">x == 10</label>
      <label kind="synchronisation">start_TrajectoryPlanner_B!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="TrajectoryPlanner_B_Exec" />
      <target ref="TrajectoryPlanner_B_Idle" />
      <label kind="guard">x == 10</label>
      <label kind="synchronisation">done_TrajectoryPlanner_B!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="TrajectoryPlanner_B_Exec" />
      <target ref="TrajectoryPlanner_B_DeadlineMiss" />
      <label kind="guard">x &gt; 20</label>
    </transition>
  </template>
  <template>
    <name>Controller_B</name>
    <declaration>clock x;</declaration>
    <location id="Controller_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Controller_B_Exec">
      <name>Exec</name>
      <label kind="invariant">x &lt;= 25</label>
    </location>
    <location id="Controller_B_DeadlineMiss">
      <name>bad</name>
    </location>
    <init ref="Controller_B_Idle" />
    <transition>
      <source ref="Controller_B_Idle" />
      <target ref="Controller_B_Exec" />
      <label kind="synchronisation">start_Controller_B?</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="Controller_B_Exec" />
      <target ref="Controller_B_Idle" />
      <label kind="guard">x == 25</label>
      <label kind="synchronisation">done_Controller_B!</label>
      <label kind="assignment">x = 0</label>
    </transition>
    <transition>
      <source ref="Controller_B_Exec" />
      <target ref="Controller_B_DeadlineMiss" />
      <label kind="guard">x &gt; 25</label>
    </transition>
  </template>
  <template>
    <name>Conn_PermissionReqTx_B_to_AckHandler_A</name>
    <location id="Conn_PermissionReqTx_B_to_AckHandler_A_Idle">
      <name>Idle</name>
    </location>
    <location id="Conn_PermissionReqTx_B_to_AckHandler_A_Trig">
      <name>Trig</name>
      <committed />
    </location>
    <init ref="Conn_PermissionReqTx_B_to_AckHandler_A_Idle" />
    <transition>
      <source ref="Conn_PermissionReqTx_B_to_AckHandler_A_Idle" />
      <target ref="Conn_PermissionReqTx_B_to_AckHandler_A_Trig" />
      <label kind="synchronisation">done_PermissionReqTx_B?</label>
    </transition>
    <transition>
      <source ref="Conn_PermissionReqTx_B_to_AckHandler_A_Trig" />
      <target ref="Conn_PermissionReqTx_B_to_AckHandler_A_Idle" />
      <label kind="synchronisation">start_AckHandler_A!</label>
    </transition>
  </template>
  <template>
    <name>Conn_AckHandler_A_to_PermissionAckRx_B</name>
    <location id="Conn_AckHandler_A_to_PermissionAckRx_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Conn_AckHandler_A_to_PermissionAckRx_B_Trig">
      <name>Trig</name>
      <committed />
    </location>
    <init ref="Conn_AckHandler_A_to_PermissionAckRx_B_Idle" />
    <transition>
      <source ref="Conn_AckHandler_A_to_PermissionAckRx_B_Idle" />
      <target ref="Conn_AckHandler_A_to_PermissionAckRx_B_Trig" />
      <label kind="synchronisation">done_AckHandler_A?</label>
    </transition>
    <transition>
      <source ref="Conn_AckHandler_A_to_PermissionAckRx_B_Trig" />
      <target ref="Conn_AckHandler_A_to_PermissionAckRx_B_Idle" />
      <label kind="synchronisation">start_PermissionAckRx_B!</label>
    </transition>
  </template>
  <template>
    <name>Conn_PermissionAckRx_B_to_TrajectoryPlanner_B</name>
    <location id="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Trig">
      <name>Trig</name>
      <committed />
    </location>
    <init ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Idle" />
    <transition>
      <source ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Idle" />
      <target ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Trig" />
      <label kind="synchronisation">done_PermissionAckRx_B?</label>
    </transition>
    <transition>
      <source ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Trig" />
      <target ref="Conn_PermissionAckRx_B_to_TrajectoryPlanner_B_Idle" />
      <label kind="synchronisation">start_TrajectoryPlanner_B!</label>
    </transition>
  </template>
  <template>
    <name>Conn_TrajectoryPlanner_B_to_Controller_B</name>
    <location id="Conn_TrajectoryPlanner_B_to_Controller_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Conn_TrajectoryPlanner_B_to_Controller_B_Trig">
      <name>Trig</name>
      <committed />
    </location>
    <init ref="Conn_TrajectoryPlanner_B_to_Controller_B_Idle" />
    <transition>
      <source ref="Conn_TrajectoryPlanner_B_to_Controller_B_Idle" />
      <target ref="Conn_TrajectoryPlanner_B_to_Controller_B_Trig" />
      <label kind="synchronisation">done_TrajectoryPlanner_B?</label>
    </transition>
    <transition>
      <source ref="Conn_TrajectoryPlanner_B_to_Controller_B_Trig" />
      <target ref="Conn_TrajectoryPlanner_B_to_Controller_B_Idle" />
      <label kind="synchronisation">start_Controller_B!</label>
    </transition>
  </template>
  <template>
    <name>Obs_PermissionReqTx_B_AckHandler_A</name>
    <declaration>clock t;</declaration>
    <location id="Obs_PermissionReqTx_B_AckHandler_A_Idle">
      <name>Idle</name>
    </location>
    <location id="Obs_PermissionReqTx_B_AckHandler_A_Wait">
      <name>Wait</name>
      <label kind="invariant">t &lt;= 8</label>
    </location>
    <location id="Obs_PermissionReqTx_B_AckHandler_A_Bad">
      <name>bad</name>
    </location>
    <init ref="Obs_PermissionReqTx_B_AckHandler_A_Idle" />
    <transition>
      <source ref="Obs_PermissionReqTx_B_AckHandler_A_Idle" />
      <target ref="Obs_PermissionReqTx_B_AckHandler_A_Wait" />
      <label kind="synchronisation">done_PermissionReqTx_B?</label>
      <label kind="assignment">t = 0</label>
    </transition>
    <transition>
      <source ref="Obs_PermissionReqTx_B_AckHandler_A_Wait" />
      <target ref="Obs_PermissionReqTx_B_AckHandler_A_Idle" />
      <label kind="synchronisation">start_AckHandler_A?</label>
    </transition>
    <transition>
      <source ref="Obs_PermissionReqTx_B_AckHandler_A_Wait" />
      <target ref="Obs_PermissionReqTx_B_AckHandler_A_Bad" />
      <label kind="guard">t == 8</label>
    </transition>
  </template>
  <template>
    <name>Obs_AckHandler_A_PermissionAckRx_B</name>
    <declaration>clock t;</declaration>
    <location id="Obs_AckHandler_A_PermissionAckRx_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Obs_AckHandler_A_PermissionAckRx_B_Wait">
      <name>Wait</name>
      <label kind="invariant">t &lt;= 8</label>
    </location>
    <location id="Obs_AckHandler_A_PermissionAckRx_B_Bad">
      <name>bad</name>
    </location>
    <init ref="Obs_AckHandler_A_PermissionAckRx_B_Idle" />
    <transition>
      <source ref="Obs_AckHandler_A_PermissionAckRx_B_Idle" />
      <target ref="Obs_AckHandler_A_PermissionAckRx_B_Wait" />
      <label kind="synchronisation">done_AckHandler_A?</label>
      <label kind="assignment">t = 0</label>
    </transition>
    <transition>
      <source ref="Obs_AckHandler_A_PermissionAckRx_B_Wait" />
      <target ref="Obs_AckHandler_A_PermissionAckRx_B_Idle" />
      <label kind="synchronisation">start_PermissionAckRx_B?</label>
    </transition>
    <transition>
      <source ref="Obs_AckHandler_A_PermissionAckRx_B_Wait" />
      <target ref="Obs_AckHandler_A_PermissionAckRx_B_Bad" />
      <label kind="guard">t == 8</label>
    </transition>
  </template>
  <template>
    <name>Obs_PermissionAckRx_B_TrajectoryPlanner_B</name>
    <declaration>clock t;</declaration>
    <location id="Obs_PermissionAckRx_B_TrajectoryPlanner_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Obs_PermissionAckRx_B_TrajectoryPlanner_B_Wait">
      <name>Wait</name>
      <label kind="invariant">t &lt;= 1</label>
    </location>
    <location id="Obs_PermissionAckRx_B_TrajectoryPlanner_B_Bad">
      <name>bad</name>
    </location>
    <init ref="Obs_PermissionAckRx_B_TrajectoryPlanner_B_Idle" />
    <transition>
      <source ref="Obs_PermissionAckRx_B_TrajectoryPlanner_B_Idle" />
      <target ref="Obs_PermissionAckRx_B_TrajectoryPlanner_B_Wait" />
      <label kind="synchronisation">done_PermissionAckRx_B?</label>
      <label kind="assignment">t = 0</label>
    </transition>
    <transition>
      <source ref="Obs_PermissionAckRx_B_TrajectoryPlanner_B_Wait" />
      <target ref="Obs_PermissionAckRx_B_TrajectoryPlanner_B_Idle" />
      <label kind="synchronisation">start_TrajectoryPlanner_B?</label>
    </transition>
    <transition>
      <source ref="Obs_PermissionAckRx_B_TrajectoryPlanner_B_Wait" />
      <target ref="Obs_PermissionAckRx_B_TrajectoryPlanner_B_Bad" />
      <label kind="guard">t == 1</label>
    </transition>
  </template>
  <template>
    <name>Obs_TrajectoryPlanner_B_Controller_B</name>
    <declaration>clock t;</declaration>
    <location id="Obs_TrajectoryPlanner_B_Controller_B_Idle">
      <name>Idle</name>
    </location>
    <location id="Obs_TrajectoryPlanner_B_Controller_B_Wait">
      <name>Wait</name>
      <label kind="invariant">t &lt;= 100</label>
    </location>
    <location id="Obs_TrajectoryPlanner_B_Controller_B_Bad">
      <name>bad</name>
    </location>
    <init ref="Obs_TrajectoryPlanner_B_Controller_B_Idle" />
    <transition>
      <source ref="Obs_TrajectoryPlanner_B_Controller_B_Idle" />
      <target ref="Obs_TrajectoryPlanner_B_Controller_B_Wait" />
      <label kind="synchronisation">done_TrajectoryPlanner_B?</label>
      <label kind="assignment">t = 0</label>
    </transition>
    <transition>
      <source ref="Obs_TrajectoryPlanner_B_Controller_B_Wait" />
      <target ref="Obs_TrajectoryPlanner_B_Controller_B_Idle" />
      <label kind="synchronisation">start_Controller_B?</label>
    </transition>
    <transition>
      <source ref="Obs_TrajectoryPlanner_B_Controller_B_Wait" />
      <target ref="Obs_TrajectoryPlanner_B_Controller_B_Bad" />
      <label kind="guard">t == 100</label>
    </transition>
  </template>
  <template>
    <name>Env_PermissionReqTx_B</name>
    <declaration>clock x;</declaration>
    <location id="Env_PermissionReqTx_B_Idle">
      <name>Idle</name>
      <label kind="invariant">x &lt;= 0</label>
    </location>
    <location id="Env_PermissionReqTx_B_Done">
      <name>Done</name>
    </location>
    <init ref="Env_PermissionReqTx_B_Idle" />
    <transition>
      <source ref="Env_PermissionReqTx_B_Idle" />
      <target ref="Env_PermissionReqTx_B_Done" />
      <label kind="guard">x == 0</label>
      <label kind="synchronisation">start_PermissionReqTx_B!</label>
    </transition>
  </template>
  <template>
    <name>PipeObs_EndToEndLatency</name>
    <declaration>clock t; clock e;</declaration>
    <location id="PipeObs_EndToEndLatency_Idle">
      <name>Idle</name>
    </location>
    <location id="PipeObs_EndToEndLatency_PermissionReqTx_B">
      <name>Wait_PermissionReqTx_B</name>
      <label kind="invariant">t &lt;= 45</label>
    </location>
    <location id="PipeObs_EndToEndLatency_AckHandler_A">
      <name>Wait_AckHandler_A</name>
      <label kind="invariant">t &lt;= 45</label>
    </location>
    <location id="PipeObs_EndToEndLatency_PermissionAckRx_B">
      <name>Wait_PermissionAckRx_B</name>
      <label kind="invariant">t &lt;= 45</label>
    </location>
    <location id="PipeObs_EndToEndLatency_TrajectoryPlanner_B">
      <name>Wait_TrajectoryPlanner_B</name>
      <label kind="invariant">t &lt;= 45</label>
    </location>
    <location id="PipeObs_EndToEndLatency_Controller_B">
      <name>Wait_Controller_B</name>
      <label kind="invariant">t &lt;= 45</label>
    </location>
    <location id="PipeObs_EndToEndLatency_Conn_PermissionReqTx_B_to_AckHandler_A">
      <name>Conn_PermissionReqTx_B_to_AckHandler_A</name>
      <label kind="invariant">e &lt;= 8</label>
    </location>
    <location id="PipeObs_EndToEndLatency_Conn_AckHandler_A_to_PermissionAckRx_B">
      <name>Conn_AckHandler_A_to_PermissionAckRx_B</name>
      <label kind="invariant">e &lt;= 8</label>
    </location>
    <location id="PipeObs_EndToEndLatency_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B">
      <name>Conn_PermissionAckRx_B_to_TrajectoryPlanner_B</name>
      <label kind="invariant">e &lt;= 1</label>
    </location>
    <location id="PipeObs_EndToEndLatency_Conn_TrajectoryPlanner_B_to_Controller_B">
      <name>Conn_TrajectoryPlanner_B_to_Controller_B</name>
      <label kind="invariant">e &lt;= 100</label>
    </location>
    <location id="PipeObs_EndToEndLatency_Bad">
      <name>bad</name>
    </location>
    <location id="PipeObs_EndToEndLatency_Done">
      <name>Done</name>
    </location>
    <init ref="PipeObs_EndToEndLatency_Idle" />
    <transition>
      <source ref="PipeObs_EndToEndLatency_Idle" />
      <target ref="PipeObs_EndToEndLatency_PermissionReqTx_B" />
      <label kind="synchronisation">start_PermissionReqTx_B?</label>
      <label kind="assignment">t = 0</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_PermissionReqTx_B" />
      <target ref="PipeObs_EndToEndLatency_Conn_PermissionReqTx_B_to_AckHandler_A" />
      <label kind="synchronisation">done_PermissionReqTx_B?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_PermissionReqTx_B_to_AckHandler_A" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">e == 8</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_PermissionReqTx_B_to_AckHandler_A" />
      <target ref="PipeObs_EndToEndLatency_AckHandler_A" />
      <label kind="synchronisation">start_AckHandler_A?</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_AckHandler_A" />
      <target ref="PipeObs_EndToEndLatency_Conn_AckHandler_A_to_PermissionAckRx_B" />
      <label kind="synchronisation">done_AckHandler_A?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_AckHandler_A_to_PermissionAckRx_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">e == 8</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_AckHandler_A_to_PermissionAckRx_B" />
      <target ref="PipeObs_EndToEndLatency_PermissionAckRx_B" />
      <label kind="synchronisation">start_PermissionAckRx_B?</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_PermissionAckRx_B" />
      <target ref="PipeObs_EndToEndLatency_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B" />
      <label kind="synchronisation">done_PermissionAckRx_B?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">e == 1</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B" />
      <target ref="PipeObs_EndToEndLatency_TrajectoryPlanner_B" />
      <label kind="synchronisation">start_TrajectoryPlanner_B?</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_TrajectoryPlanner_B" />
      <target ref="PipeObs_EndToEndLatency_Conn_TrajectoryPlanner_B_to_Controller_B" />
      <label kind="synchronisation">done_TrajectoryPlanner_B?</label>
      <label kind="assignment">e = 0</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_TrajectoryPlanner_B_to_Controller_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">e == 100</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Conn_TrajectoryPlanner_B_to_Controller_B" />
      <target ref="PipeObs_EndToEndLatency_Controller_B" />
      <label kind="synchronisation">start_Controller_B?</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Controller_B" />
      <target ref="PipeObs_EndToEndLatency_Done" />
      <label kind="synchronisation">done_Controller_B?</label>
      <label kind="guard">t &lt;= 45</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_PermissionReqTx_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 45</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_AckHandler_A" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 45</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_PermissionAckRx_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 45</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_TrajectoryPlanner_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 45</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Controller_B" />
      <target ref="PipeObs_EndToEndLatency_Bad" />
      <label kind="guard">t == 45</label>
    </transition>
    <transition>
      <source ref="PipeObs_EndToEndLatency_Done" />
      <target ref="PipeObs_EndToEndLatency_Idle" />
    </transition>
  </template>
  <system>
    P_Perception_A = Perception_A();
    P_AckHandler_A = AckHandler_A();
    P_Perception_B = Perception_B();
    P_PermissionReqTx_B = PermissionReqTx_B();
    P_PermissionAckRx_B = PermissionAckRx_B();
    P_TrajectoryPlanner_B = TrajectoryPlanner_B();
    P_Controller_B = Controller_B();
    D_Conn_PermissionReqTx_B_to_AckHandler_A = Conn_PermissionReqTx_B_to_AckHandler_A();
    D_Conn_AckHandler_A_to_PermissionAckRx_B = Conn_AckHandler_A_to_PermissionAckRx_B();
    D_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B = Conn_PermissionAckRx_B_to_TrajectoryPlanner_B();
    D_Conn_TrajectoryPlanner_B_to_Controller_B = Conn_TrajectoryPlanner_B_to_Controller_B();
    I_Obs_PermissionReqTx_B_AckHandler_A = Obs_PermissionReqTx_B_AckHandler_A();
    I_Obs_AckHandler_A_PermissionAckRx_B = Obs_AckHandler_A_PermissionAckRx_B();
    I_Obs_PermissionAckRx_B_TrajectoryPlanner_B = Obs_PermissionAckRx_B_TrajectoryPlanner_B();
    I_Obs_TrajectoryPlanner_B_Controller_B = Obs_TrajectoryPlanner_B_Controller_B();
    I_Env_PermissionReqTx_B = Env_PermissionReqTx_B();
    I_PipeObs_EndToEndLatency = PipeObs_EndToEndLatency();
    system P_Perception_A, P_AckHandler_A, P_Perception_B, P_PermissionReqTx_B, P_PermissionAckRx_B, P_TrajectoryPlanner_B, P_Controller_B, D_Conn_PermissionReqTx_B_to_AckHandler_A, D_Conn_AckHandler_A_to_PermissionAckRx_B, D_Conn_PermissionAckRx_B_to_TrajectoryPlanner_B, D_Conn_TrajectoryPlanner_B_to_Controller_B, I_Obs_PermissionReqTx_B_AckHandler_A, I_Obs_AckHandler_A_PermissionAckRx_B, I_Obs_PermissionAckRx_B_TrajectoryPlanner_B, I_Obs_TrajectoryPlanner_B_Controller_B, I_Env_PermissionReqTx_B, I_PipeObs_EndToEndLatency;
  </system>
</nta>