# Generated from C:/Users/kaiwe/Documents/Master/Masterarbeit/Projekt/DSL/Robotics.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,174,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,
        1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,
        1,15,5,15,135,8,15,10,15,12,15,138,9,15,1,15,1,15,1,16,4,16,143,
        8,16,11,16,12,16,144,1,17,1,17,1,17,1,18,1,18,5,18,152,8,18,10,18,
        12,18,155,9,18,1,19,4,19,158,8,19,11,19,12,19,159,1,19,1,19,1,20,
        1,20,1,20,1,20,5,20,168,8,20,10,20,12,20,171,9,20,1,20,1,20,0,0,
        21,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,1,0,6,2,0,34,
        34,92,92,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,179,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,1,
        0,0,0,3,53,1,0,0,0,5,61,1,0,0,0,7,70,1,0,0,0,9,77,1,0,0,0,11,86,
        1,0,0,0,13,91,1,0,0,0,15,100,1,0,0,0,17,115,1,0,0,0,19,118,1,0,0,
        0,21,120,1,0,0,0,23,122,1,0,0,0,25,124,1,0,0,0,27,126,1,0,0,0,29,
        128,1,0,0,0,31,130,1,0,0,0,33,142,1,0,0,0,35,146,1,0,0,0,37,149,
        1,0,0,0,39,157,1,0,0,0,41,163,1,0,0,0,43,44,5,67,0,0,44,45,5,79,
        0,0,45,46,5,77,0,0,46,47,5,80,0,0,47,48,5,79,0,0,48,49,5,78,0,0,
        49,50,5,69,0,0,50,51,5,78,0,0,51,52,5,84,0,0,52,2,1,0,0,0,53,54,
        5,67,0,0,54,55,5,79,0,0,55,56,5,78,0,0,56,57,5,78,0,0,57,58,5,69,
        0,0,58,59,5,67,0,0,59,60,5,84,0,0,60,4,1,0,0,0,61,62,5,80,0,0,62,
        63,5,82,0,0,63,64,5,79,0,0,64,65,5,80,0,0,65,66,5,69,0,0,66,67,5,
        82,0,0,67,68,5,84,0,0,68,69,5,89,0,0,69,6,1,0,0,0,70,71,5,112,0,
        0,71,72,5,101,0,0,72,73,5,114,0,0,73,74,5,105,0,0,74,75,5,111,0,
        0,75,76,5,100,0,0,76,8,1,0,0,0,77,78,5,100,0,0,78,79,5,101,0,0,79,
        80,5,97,0,0,80,81,5,100,0,0,81,82,5,108,0,0,82,83,5,105,0,0,83,84,
        5,110,0,0,84,85,5,101,0,0,85,10,1,0,0,0,86,87,5,87,0,0,87,88,5,67,
        0,0,88,89,5,69,0,0,89,90,5,84,0,0,90,12,1,0,0,0,91,92,5,112,0,0,
        92,93,5,114,0,0,93,94,5,105,0,0,94,95,5,111,0,0,95,96,5,114,0,0,
        96,97,5,105,0,0,97,98,5,116,0,0,98,99,5,121,0,0,99,14,1,0,0,0,100,
        101,5,108,0,0,101,102,5,97,0,0,102,103,5,116,0,0,103,104,5,101,0,
        0,104,105,5,110,0,0,105,106,5,99,0,0,106,107,5,121,0,0,107,108,5,
        95,0,0,108,109,5,98,0,0,109,110,5,117,0,0,110,111,5,100,0,0,111,
        112,5,103,0,0,112,113,5,101,0,0,113,114,5,116,0,0,114,16,1,0,0,0,
        115,116,5,45,0,0,116,117,5,62,0,0,117,18,1,0,0,0,118,119,5,123,0,
        0,119,20,1,0,0,0,120,121,5,125,0,0,121,22,1,0,0,0,122,123,5,58,0,
        0,123,24,1,0,0,0,124,125,5,59,0,0,125,26,1,0,0,0,126,127,5,61,0,
        0,127,28,1,0,0,0,128,129,5,46,0,0,129,30,1,0,0,0,130,136,5,34,0,
        0,131,135,8,0,0,0,132,133,5,92,0,0,133,135,9,0,0,0,134,131,1,0,0,
        0,134,132,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,
        0,137,139,1,0,0,0,138,136,1,0,0,0,139,140,5,34,0,0,140,32,1,0,0,
        0,141,143,7,1,0,0,142,141,1,0,0,0,143,144,1,0,0,0,144,142,1,0,0,
        0,144,145,1,0,0,0,145,34,1,0,0,0,146,147,5,109,0,0,147,148,5,115,
        0,0,148,36,1,0,0,0,149,153,7,2,0,0,150,152,7,3,0,0,151,150,1,0,0,
        0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,38,1,0,0,0,
        155,153,1,0,0,0,156,158,7,4,0,0,157,156,1,0,0,0,158,159,1,0,0,0,
        159,157,1,0,0,0,159,160,1,0,0,0,160,161,1,0,0,0,161,162,6,19,0,0,
        162,40,1,0,0,0,163,164,5,47,0,0,164,165,5,47,0,0,165,169,1,0,0,0,
        166,168,8,5,0,0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,
        169,170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,6,20,0,0,
        173,42,1,0,0,0,7,0,134,136,144,153,159,169,1,6,0,0
    ]

class RoboticsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMPONENT = 1
    CONNECT = 2
    PROPERTY = 3
    PERIOD = 4
    DEADLINE = 5
    WCET = 6
    PRIORITY = 7
    LATENCY_BUDGET = 8
    ARROW = 9
    LBRACE = 10
    RBRACE = 11
    COLON = 12
    SEMI = 13
    EQUAL = 14
    DOT = 15
    STRING = 16
    INT = 17
    UNIT_MS = 18
    ID = 19
    WS = 20
    LINE_COMMENT = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'COMPONENT'", "'CONNECT'", "'PROPERTY'", "'period'", "'deadline'", 
            "'WCET'", "'priority'", "'latency_budget'", "'->'", "'{'", "'}'", 
            "':'", "';'", "'='", "'.'", "'ms'" ]

    symbolicNames = [ "<INVALID>",
            "COMPONENT", "CONNECT", "PROPERTY", "PERIOD", "DEADLINE", "WCET", 
            "PRIORITY", "LATENCY_BUDGET", "ARROW", "LBRACE", "RBRACE", "COLON", 
            "SEMI", "EQUAL", "DOT", "STRING", "INT", "UNIT_MS", "ID", "WS", 
            "LINE_COMMENT" ]

    ruleNames = [ "COMPONENT", "CONNECT", "PROPERTY", "PERIOD", "DEADLINE", 
                  "WCET", "PRIORITY", "LATENCY_BUDGET", "ARROW", "LBRACE", 
                  "RBRACE", "COLON", "SEMI", "EQUAL", "DOT", "STRING", "INT", 
                  "UNIT_MS", "ID", "WS", "LINE_COMMENT" ]

    grammarFileName = "Robotics.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


