# Generated from C:/Users/kaiwe/Documents/Master/Masterarbeit/Projekt/DSL/Robotics.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,47,377,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,
        14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,
        21,1,21,1,21,1,21,5,21,213,8,21,10,21,12,21,216,9,21,1,21,1,21,1,
        22,4,22,221,8,22,11,22,12,22,222,1,23,1,23,1,23,1,24,4,24,229,8,
        24,11,24,12,24,230,1,24,1,24,1,25,1,25,1,25,1,25,5,25,239,8,25,10,
        25,12,25,242,9,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,3,30,308,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,326,8,31,1,32,1,
        32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,
        34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,
        38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,
        44,1,45,1,45,1,46,1,46,5,46,373,8,46,10,46,12,46,376,9,46,0,0,47,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,47,1,0,6,2,0,34,34,92,92,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,
        10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,384,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,1,95,1,0,0,0,3,97,1,0,0,0,5,99,1,0,0,0,7,102,
        1,0,0,0,9,112,1,0,0,0,11,120,1,0,0,0,13,129,1,0,0,0,15,136,1,0,0,
        0,17,145,1,0,0,0,19,150,1,0,0,0,21,159,1,0,0,0,23,174,1,0,0,0,25,
        181,1,0,0,0,27,189,1,0,0,0,29,193,1,0,0,0,31,196,1,0,0,0,33,198,
        1,0,0,0,35,200,1,0,0,0,37,202,1,0,0,0,39,204,1,0,0,0,41,206,1,0,
        0,0,43,208,1,0,0,0,45,220,1,0,0,0,47,224,1,0,0,0,49,228,1,0,0,0,
        51,234,1,0,0,0,53,245,1,0,0,0,55,258,1,0,0,0,57,268,1,0,0,0,59,279,
        1,0,0,0,61,307,1,0,0,0,63,325,1,0,0,0,65,327,1,0,0,0,67,333,1,0,
        0,0,69,340,1,0,0,0,71,343,1,0,0,0,73,346,1,0,0,0,75,349,1,0,0,0,
        77,352,1,0,0,0,79,355,1,0,0,0,81,358,1,0,0,0,83,360,1,0,0,0,85,362,
        1,0,0,0,87,364,1,0,0,0,89,366,1,0,0,0,91,368,1,0,0,0,93,370,1,0,
        0,0,95,96,5,40,0,0,96,2,1,0,0,0,97,98,5,41,0,0,98,4,1,0,0,0,99,100,
        5,46,0,0,100,101,5,46,0,0,101,6,1,0,0,0,102,103,5,67,0,0,103,104,
        5,79,0,0,104,105,5,77,0,0,105,106,5,80,0,0,106,107,5,79,0,0,107,
        108,5,78,0,0,108,109,5,69,0,0,109,110,5,78,0,0,110,111,5,84,0,0,
        111,8,1,0,0,0,112,113,5,67,0,0,113,114,5,79,0,0,114,115,5,78,0,0,
        115,116,5,78,0,0,116,117,5,69,0,0,117,118,5,67,0,0,118,119,5,84,
        0,0,119,10,1,0,0,0,120,121,5,80,0,0,121,122,5,82,0,0,122,123,5,79,
        0,0,123,124,5,80,0,0,124,125,5,69,0,0,125,126,5,82,0,0,126,127,5,
        84,0,0,127,128,5,89,0,0,128,12,1,0,0,0,129,130,5,112,0,0,130,131,
        5,101,0,0,131,132,5,114,0,0,132,133,5,105,0,0,133,134,5,111,0,0,
        134,135,5,100,0,0,135,14,1,0,0,0,136,137,5,100,0,0,137,138,5,101,
        0,0,138,139,5,97,0,0,139,140,5,100,0,0,140,141,5,108,0,0,141,142,
        5,105,0,0,142,143,5,110,0,0,143,144,5,101,0,0,144,16,1,0,0,0,145,
        146,5,87,0,0,146,147,5,67,0,0,147,148,5,69,0,0,148,149,5,84,0,0,
        149,18,1,0,0,0,150,151,5,112,0,0,151,152,5,114,0,0,152,153,5,105,
        0,0,153,154,5,111,0,0,154,155,5,114,0,0,155,156,5,105,0,0,156,157,
        5,116,0,0,157,158,5,121,0,0,158,20,1,0,0,0,159,160,5,108,0,0,160,
        161,5,97,0,0,161,162,5,116,0,0,162,163,5,101,0,0,163,164,5,110,0,
        0,164,165,5,99,0,0,165,166,5,121,0,0,166,167,5,95,0,0,167,168,5,
        98,0,0,168,169,5,117,0,0,169,170,5,100,0,0,170,171,5,103,0,0,171,
        172,5,101,0,0,172,173,5,116,0,0,173,22,1,0,0,0,174,175,5,83,0,0,
        175,176,5,89,0,0,176,177,5,83,0,0,177,178,5,84,0,0,178,179,5,69,
        0,0,179,180,5,77,0,0,180,24,1,0,0,0,181,182,5,86,0,0,182,183,5,69,
        0,0,183,184,5,72,0,0,184,185,5,73,0,0,185,186,5,67,0,0,186,187,5,
        76,0,0,187,188,5,69,0,0,188,26,1,0,0,0,189,190,5,67,0,0,190,191,
        5,80,0,0,191,192,5,85,0,0,192,28,1,0,0,0,193,194,5,45,0,0,194,195,
        5,62,0,0,195,30,1,0,0,0,196,197,5,123,0,0,197,32,1,0,0,0,198,199,
        5,125,0,0,199,34,1,0,0,0,200,201,5,58,0,0,201,36,1,0,0,0,202,203,
        5,59,0,0,203,38,1,0,0,0,204,205,5,61,0,0,205,40,1,0,0,0,206,207,
        5,46,0,0,207,42,1,0,0,0,208,214,5,34,0,0,209,213,8,0,0,0,210,211,
        5,92,0,0,211,213,9,0,0,0,212,209,1,0,0,0,212,210,1,0,0,0,213,216,
        1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,214,
        1,0,0,0,217,218,5,34,0,0,218,44,1,0,0,0,219,221,7,1,0,0,220,219,
        1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,46,1,
        0,0,0,224,225,5,109,0,0,225,226,5,115,0,0,226,48,1,0,0,0,227,229,
        7,2,0,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,
        1,0,0,0,231,232,1,0,0,0,232,233,6,24,0,0,233,50,1,0,0,0,234,235,
        5,47,0,0,235,236,5,47,0,0,236,240,1,0,0,0,237,239,8,3,0,0,238,237,
        1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,243,
        1,0,0,0,242,240,1,0,0,0,243,244,6,25,0,0,244,52,1,0,0,0,245,246,
        5,79,0,0,246,247,5,80,0,0,247,248,5,84,0,0,248,249,5,73,0,0,249,
        250,5,77,0,0,250,251,5,73,0,0,251,252,5,83,0,0,252,253,5,65,0,0,
        253,254,5,84,0,0,254,255,5,73,0,0,255,256,5,79,0,0,256,257,5,78,
        0,0,257,54,1,0,0,0,258,259,5,86,0,0,259,260,5,65,0,0,260,261,5,82,
        0,0,261,262,5,73,0,0,262,263,5,65,0,0,263,264,5,66,0,0,264,265,5,
        76,0,0,265,266,5,69,0,0,266,267,5,83,0,0,267,56,1,0,0,0,268,269,
        5,79,0,0,269,270,5,66,0,0,270,271,5,74,0,0,271,272,5,69,0,0,272,
        273,5,67,0,0,273,274,5,84,0,0,274,275,5,73,0,0,275,276,5,86,0,0,
        276,277,5,69,0,0,277,278,5,83,0,0,278,58,1,0,0,0,279,280,5,67,0,
        0,280,281,5,79,0,0,281,282,5,78,0,0,282,283,5,83,0,0,283,284,5,84,
        0,0,284,285,5,82,0,0,285,286,5,65,0,0,286,287,5,73,0,0,287,288,5,
        78,0,0,288,289,5,84,0,0,289,290,5,83,0,0,290,60,1,0,0,0,291,292,
        5,109,0,0,292,293,5,105,0,0,293,294,5,110,0,0,294,295,5,105,0,0,
        295,296,5,109,0,0,296,297,5,105,0,0,297,298,5,115,0,0,298,308,5,
        101,0,0,299,300,5,109,0,0,300,301,5,105,0,0,301,302,5,110,0,0,302,
        303,5,105,0,0,303,304,5,109,0,0,304,305,5,105,0,0,305,306,5,122,
        0,0,306,308,5,101,0,0,307,291,1,0,0,0,307,299,1,0,0,0,308,62,1,0,
        0,0,309,310,5,109,0,0,310,311,5,97,0,0,311,312,5,120,0,0,312,313,
        5,105,0,0,313,314,5,109,0,0,314,315,5,105,0,0,315,316,5,115,0,0,
        316,326,5,101,0,0,317,318,5,109,0,0,318,319,5,97,0,0,319,320,5,120,
        0,0,320,321,5,105,0,0,321,322,5,109,0,0,322,323,5,105,0,0,323,324,
        5,122,0,0,324,326,5,101,0,0,325,309,1,0,0,0,325,317,1,0,0,0,326,
        64,1,0,0,0,327,328,5,114,0,0,328,329,5,97,0,0,329,330,5,110,0,0,
        330,331,5,103,0,0,331,332,5,101,0,0,332,66,1,0,0,0,333,334,5,97,
        0,0,334,335,5,115,0,0,335,336,5,115,0,0,336,337,5,101,0,0,337,338,
        5,114,0,0,338,339,5,116,0,0,339,68,1,0,0,0,340,341,5,38,0,0,341,
        342,5,38,0,0,342,70,1,0,0,0,343,344,5,124,0,0,344,345,5,124,0,0,
        345,72,1,0,0,0,346,347,5,61,0,0,347,348,5,61,0,0,348,74,1,0,0,0,
        349,350,5,33,0,0,350,351,5,61,0,0,351,76,1,0,0,0,352,353,5,60,0,
        0,353,354,5,61,0,0,354,78,1,0,0,0,355,356,5,62,0,0,356,357,5,61,
        0,0,357,80,1,0,0,0,358,359,5,60,0,0,359,82,1,0,0,0,360,361,5,62,
        0,0,361,84,1,0,0,0,362,363,5,43,0,0,363,86,1,0,0,0,364,365,5,45,
        0,0,365,88,1,0,0,0,366,367,5,42,0,0,367,90,1,0,0,0,368,369,5,47,
        0,0,369,92,1,0,0,0,370,374,7,4,0,0,371,373,7,5,0,0,372,371,1,0,0,
        0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,94,1,0,0,0,
        376,374,1,0,0,0,9,0,212,214,222,230,240,307,325,374,1,6,0,0
    ]

class RoboticsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    COMPONENT = 4
    CONNECT = 5
    PROPERTY = 6
    PERIOD = 7
    DEADLINE = 8
    WCET = 9
    PRIORITY = 10
    LATENCY_BUDGET = 11
    SYSTEM = 12
    VEHICLE = 13
    CPU = 14
    ARROW = 15
    LBRACE = 16
    RBRACE = 17
    COLON = 18
    SEMI = 19
    EQUAL = 20
    DOT = 21
    STRING = 22
    INT = 23
    UNIT_MS = 24
    WS = 25
    LINE_COMMENT = 26
    OPTIMISATION = 27
    VARIABLES = 28
    OBJECTIVES = 29
    CONSTRAINTS = 30
    MINIMISE = 31
    MAXIMISE = 32
    RANGE = 33
    ASSERT = 34
    AND = 35
    OR = 36
    EQ = 37
    NEQ = 38
    LE = 39
    GE = 40
    LT = 41
    GT = 42
    PLUS = 43
    MINUS = 44
    STAR = 45
    SLASH = 46
    ID = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'..'", "'COMPONENT'", "'CONNECT'", "'PROPERTY'", 
            "'period'", "'deadline'", "'WCET'", "'priority'", "'latency_budget'", 
            "'SYSTEM'", "'VEHICLE'", "'CPU'", "'->'", "'{'", "'}'", "':'", 
            "';'", "'='", "'.'", "'ms'", "'OPTIMISATION'", "'VARIABLES'", 
            "'OBJECTIVES'", "'CONSTRAINTS'", "'range'", "'assert'", "'&&'", 
            "'||'", "'=='", "'!='", "'<='", "'>='", "'<'", "'>'", "'+'", 
            "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "COMPONENT", "CONNECT", "PROPERTY", "PERIOD", "DEADLINE", "WCET", 
            "PRIORITY", "LATENCY_BUDGET", "SYSTEM", "VEHICLE", "CPU", "ARROW", 
            "LBRACE", "RBRACE", "COLON", "SEMI", "EQUAL", "DOT", "STRING", 
            "INT", "UNIT_MS", "WS", "LINE_COMMENT", "OPTIMISATION", "VARIABLES", 
            "OBJECTIVES", "CONSTRAINTS", "MINIMISE", "MAXIMISE", "RANGE", 
            "ASSERT", "AND", "OR", "EQ", "NEQ", "LE", "GE", "LT", "GT", 
            "PLUS", "MINUS", "STAR", "SLASH", "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "COMPONENT", "CONNECT", "PROPERTY", 
                  "PERIOD", "DEADLINE", "WCET", "PRIORITY", "LATENCY_BUDGET", 
                  "SYSTEM", "VEHICLE", "CPU", "ARROW", "LBRACE", "RBRACE", 
                  "COLON", "SEMI", "EQUAL", "DOT", "STRING", "INT", "UNIT_MS", 
                  "WS", "LINE_COMMENT", "OPTIMISATION", "VARIABLES", "OBJECTIVES", 
                  "CONSTRAINTS", "MINIMISE", "MAXIMISE", "RANGE", "ASSERT", 
                  "AND", "OR", "EQ", "NEQ", "LE", "GE", "LT", "GT", "PLUS", 
                  "MINUS", "STAR", "SLASH", "ID" ]

    grammarFileName = "Robotics.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


