# Generated from C:/Users/kaiwe/Documents/Master/Masterarbeit/Projekt/DSL/Robotics.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,52,419,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,
        0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
        14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
        18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
        24,1,25,1,25,1,26,1,26,1,26,1,26,5,26,255,8,26,10,26,12,26,258,9,
        26,1,26,1,26,1,27,4,27,263,8,27,11,27,12,27,264,1,28,1,28,1,28,1,
        29,4,29,271,8,29,11,29,12,29,272,1,29,1,29,1,30,1,30,1,30,1,30,5,
        30,281,8,30,10,30,12,30,284,9,30,1,30,1,30,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,3,35,350,8,35,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,368,
        8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,
        1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,
        1,48,1,49,1,49,1,50,1,50,1,51,1,51,5,51,415,8,51,10,51,12,51,418,
        9,51,0,0,52,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
        89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,1,0,6,2,0,34,34,
        92,92,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,426,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
        0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
        0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,
        0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,
        0,1,105,1,0,0,0,3,107,1,0,0,0,5,109,1,0,0,0,7,112,1,0,0,0,9,122,
        1,0,0,0,11,130,1,0,0,0,13,139,1,0,0,0,15,146,1,0,0,0,17,155,1,0,
        0,0,19,160,1,0,0,0,21,169,1,0,0,0,23,184,1,0,0,0,25,190,1,0,0,0,
        27,197,1,0,0,0,29,205,1,0,0,0,31,209,1,0,0,0,33,219,1,0,0,0,35,231,
        1,0,0,0,37,234,1,0,0,0,39,236,1,0,0,0,41,238,1,0,0,0,43,240,1,0,
        0,0,45,242,1,0,0,0,47,244,1,0,0,0,49,246,1,0,0,0,51,248,1,0,0,0,
        53,250,1,0,0,0,55,262,1,0,0,0,57,266,1,0,0,0,59,270,1,0,0,0,61,276,
        1,0,0,0,63,287,1,0,0,0,65,300,1,0,0,0,67,310,1,0,0,0,69,321,1,0,
        0,0,71,349,1,0,0,0,73,367,1,0,0,0,75,369,1,0,0,0,77,375,1,0,0,0,
        79,382,1,0,0,0,81,385,1,0,0,0,83,388,1,0,0,0,85,391,1,0,0,0,87,394,
        1,0,0,0,89,397,1,0,0,0,91,400,1,0,0,0,93,402,1,0,0,0,95,404,1,0,
        0,0,97,406,1,0,0,0,99,408,1,0,0,0,101,410,1,0,0,0,103,412,1,0,0,
        0,105,106,5,40,0,0,106,2,1,0,0,0,107,108,5,41,0,0,108,4,1,0,0,0,
        109,110,5,46,0,0,110,111,5,46,0,0,111,6,1,0,0,0,112,113,5,67,0,0,
        113,114,5,79,0,0,114,115,5,77,0,0,115,116,5,80,0,0,116,117,5,79,
        0,0,117,118,5,78,0,0,118,119,5,69,0,0,119,120,5,78,0,0,120,121,5,
        84,0,0,121,8,1,0,0,0,122,123,5,67,0,0,123,124,5,79,0,0,124,125,5,
        78,0,0,125,126,5,78,0,0,126,127,5,69,0,0,127,128,5,67,0,0,128,129,
        5,84,0,0,129,10,1,0,0,0,130,131,5,80,0,0,131,132,5,82,0,0,132,133,
        5,79,0,0,133,134,5,80,0,0,134,135,5,69,0,0,135,136,5,82,0,0,136,
        137,5,84,0,0,137,138,5,89,0,0,138,12,1,0,0,0,139,140,5,112,0,0,140,
        141,5,101,0,0,141,142,5,114,0,0,142,143,5,105,0,0,143,144,5,111,
        0,0,144,145,5,100,0,0,145,14,1,0,0,0,146,147,5,100,0,0,147,148,5,
        101,0,0,148,149,5,97,0,0,149,150,5,100,0,0,150,151,5,108,0,0,151,
        152,5,105,0,0,152,153,5,110,0,0,153,154,5,101,0,0,154,16,1,0,0,0,
        155,156,5,87,0,0,156,157,5,67,0,0,157,158,5,69,0,0,158,159,5,84,
        0,0,159,18,1,0,0,0,160,161,5,112,0,0,161,162,5,114,0,0,162,163,5,
        105,0,0,163,164,5,111,0,0,164,165,5,114,0,0,165,166,5,105,0,0,166,
        167,5,116,0,0,167,168,5,121,0,0,168,20,1,0,0,0,169,170,5,108,0,0,
        170,171,5,97,0,0,171,172,5,116,0,0,172,173,5,101,0,0,173,174,5,110,
        0,0,174,175,5,99,0,0,175,176,5,121,0,0,176,177,5,95,0,0,177,178,
        5,98,0,0,178,179,5,117,0,0,179,180,5,100,0,0,180,181,5,103,0,0,181,
        182,5,101,0,0,182,183,5,116,0,0,183,22,1,0,0,0,184,185,5,99,0,0,
        185,186,5,108,0,0,186,187,5,97,0,0,187,188,5,115,0,0,188,189,5,115,
        0,0,189,24,1,0,0,0,190,191,5,83,0,0,191,192,5,89,0,0,192,193,5,83,
        0,0,193,194,5,84,0,0,194,195,5,69,0,0,195,196,5,77,0,0,196,26,1,
        0,0,0,197,198,5,86,0,0,198,199,5,69,0,0,199,200,5,72,0,0,200,201,
        5,73,0,0,201,202,5,67,0,0,202,203,5,76,0,0,203,204,5,69,0,0,204,
        28,1,0,0,0,205,206,5,67,0,0,206,207,5,80,0,0,207,208,5,85,0,0,208,
        30,1,0,0,0,209,210,5,115,0,0,210,211,5,99,0,0,211,212,5,104,0,0,
        212,213,5,101,0,0,213,214,5,100,0,0,214,215,5,117,0,0,215,216,5,
        108,0,0,216,217,5,101,0,0,217,218,5,114,0,0,218,32,1,0,0,0,219,220,
        5,99,0,0,220,221,5,108,0,0,221,222,5,97,0,0,222,223,5,115,0,0,223,
        224,5,115,0,0,224,225,5,95,0,0,225,226,5,111,0,0,226,227,5,114,0,
        0,227,228,5,100,0,0,228,229,5,101,0,0,229,230,5,114,0,0,230,34,1,
        0,0,0,231,232,5,45,0,0,232,233,5,62,0,0,233,36,1,0,0,0,234,235,5,
        123,0,0,235,38,1,0,0,0,236,237,5,125,0,0,237,40,1,0,0,0,238,239,
        5,58,0,0,239,42,1,0,0,0,240,241,5,59,0,0,241,44,1,0,0,0,242,243,
        5,61,0,0,243,46,1,0,0,0,244,245,5,46,0,0,245,48,1,0,0,0,246,247,
        5,91,0,0,247,50,1,0,0,0,248,249,5,93,0,0,249,52,1,0,0,0,250,256,
        5,34,0,0,251,255,8,0,0,0,252,253,5,92,0,0,253,255,9,0,0,0,254,251,
        1,0,0,0,254,252,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,
        1,0,0,0,257,259,1,0,0,0,258,256,1,0,0,0,259,260,5,34,0,0,260,54,
        1,0,0,0,261,263,7,1,0,0,262,261,1,0,0,0,263,264,1,0,0,0,264,262,
        1,0,0,0,264,265,1,0,0,0,265,56,1,0,0,0,266,267,5,109,0,0,267,268,
        5,115,0,0,268,58,1,0,0,0,269,271,7,2,0,0,270,269,1,0,0,0,271,272,
        1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,274,1,0,0,0,274,275,
        6,29,0,0,275,60,1,0,0,0,276,277,5,47,0,0,277,278,5,47,0,0,278,282,
        1,0,0,0,279,281,8,3,0,0,280,279,1,0,0,0,281,284,1,0,0,0,282,280,
        1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,282,1,0,0,0,285,286,
        6,30,0,0,286,62,1,0,0,0,287,288,5,79,0,0,288,289,5,80,0,0,289,290,
        5,84,0,0,290,291,5,73,0,0,291,292,5,77,0,0,292,293,5,73,0,0,293,
        294,5,83,0,0,294,295,5,65,0,0,295,296,5,84,0,0,296,297,5,73,0,0,
        297,298,5,79,0,0,298,299,5,78,0,0,299,64,1,0,0,0,300,301,5,86,0,
        0,301,302,5,65,0,0,302,303,5,82,0,0,303,304,5,73,0,0,304,305,5,65,
        0,0,305,306,5,66,0,0,306,307,5,76,0,0,307,308,5,69,0,0,308,309,5,
        83,0,0,309,66,1,0,0,0,310,311,5,79,0,0,311,312,5,66,0,0,312,313,
        5,74,0,0,313,314,5,69,0,0,314,315,5,67,0,0,315,316,5,84,0,0,316,
        317,5,73,0,0,317,318,5,86,0,0,318,319,5,69,0,0,319,320,5,83,0,0,
        320,68,1,0,0,0,321,322,5,67,0,0,322,323,5,79,0,0,323,324,5,78,0,
        0,324,325,5,83,0,0,325,326,5,84,0,0,326,327,5,82,0,0,327,328,5,65,
        0,0,328,329,5,73,0,0,329,330,5,78,0,0,330,331,5,84,0,0,331,332,5,
        83,0,0,332,70,1,0,0,0,333,334,5,109,0,0,334,335,5,105,0,0,335,336,
        5,110,0,0,336,337,5,105,0,0,337,338,5,109,0,0,338,339,5,105,0,0,
        339,340,5,115,0,0,340,350,5,101,0,0,341,342,5,109,0,0,342,343,5,
        105,0,0,343,344,5,110,0,0,344,345,5,105,0,0,345,346,5,109,0,0,346,
        347,5,105,0,0,347,348,5,122,0,0,348,350,5,101,0,0,349,333,1,0,0,
        0,349,341,1,0,0,0,350,72,1,0,0,0,351,352,5,109,0,0,352,353,5,97,
        0,0,353,354,5,120,0,0,354,355,5,105,0,0,355,356,5,109,0,0,356,357,
        5,105,0,0,357,358,5,115,0,0,358,368,5,101,0,0,359,360,5,109,0,0,
        360,361,5,97,0,0,361,362,5,120,0,0,362,363,5,105,0,0,363,364,5,109,
        0,0,364,365,5,105,0,0,365,366,5,122,0,0,366,368,5,101,0,0,367,351,
        1,0,0,0,367,359,1,0,0,0,368,74,1,0,0,0,369,370,5,114,0,0,370,371,
        5,97,0,0,371,372,5,110,0,0,372,373,5,103,0,0,373,374,5,101,0,0,374,
        76,1,0,0,0,375,376,5,97,0,0,376,377,5,115,0,0,377,378,5,115,0,0,
        378,379,5,101,0,0,379,380,5,114,0,0,380,381,5,116,0,0,381,78,1,0,
        0,0,382,383,5,38,0,0,383,384,5,38,0,0,384,80,1,0,0,0,385,386,5,124,
        0,0,386,387,5,124,0,0,387,82,1,0,0,0,388,389,5,61,0,0,389,390,5,
        61,0,0,390,84,1,0,0,0,391,392,5,33,0,0,392,393,5,61,0,0,393,86,1,
        0,0,0,394,395,5,60,0,0,395,396,5,61,0,0,396,88,1,0,0,0,397,398,5,
        62,0,0,398,399,5,61,0,0,399,90,1,0,0,0,400,401,5,60,0,0,401,92,1,
        0,0,0,402,403,5,62,0,0,403,94,1,0,0,0,404,405,5,43,0,0,405,96,1,
        0,0,0,406,407,5,45,0,0,407,98,1,0,0,0,408,409,5,42,0,0,409,100,1,
        0,0,0,410,411,5,47,0,0,411,102,1,0,0,0,412,416,7,4,0,0,413,415,7,
        5,0,0,414,413,1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,1,
        0,0,0,417,104,1,0,0,0,418,416,1,0,0,0,9,0,254,256,264,272,282,349,
        367,416,1,6,0,0
    ]

class RoboticsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    COMPONENT = 4
    CONNECT = 5
    PROPERTY = 6
    PERIOD = 7
    DEADLINE = 8
    WCET = 9
    PRIORITY = 10
    LATENCY_BUDGET = 11
    CLASS = 12
    SYSTEM = 13
    VEHICLE = 14
    CPU = 15
    SCHEDULER = 16
    CLASS_ORDER = 17
    ARROW = 18
    LBRACE = 19
    RBRACE = 20
    COLON = 21
    SEMI = 22
    EQUAL = 23
    DOT = 24
    LSQUARE = 25
    RSQUARE = 26
    STRING = 27
    INT = 28
    UNIT_MS = 29
    WS = 30
    LINE_COMMENT = 31
    OPTIMISATION = 32
    VARIABLES = 33
    OBJECTIVES = 34
    CONSTRAINTS = 35
    MINIMISE = 36
    MAXIMISE = 37
    RANGE = 38
    ASSERT = 39
    AND = 40
    OR = 41
    EQ = 42
    NEQ = 43
    LE = 44
    GE = 45
    LT = 46
    GT = 47
    PLUS = 48
    MINUS = 49
    STAR = 50
    SLASH = 51
    ID = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'..'", "'COMPONENT'", "'CONNECT'", "'PROPERTY'", 
            "'period'", "'deadline'", "'WCET'", "'priority'", "'latency_budget'", 
            "'class'", "'SYSTEM'", "'VEHICLE'", "'CPU'", "'scheduler'", 
            "'class_order'", "'->'", "'{'", "'}'", "':'", "';'", "'='", 
            "'.'", "'['", "']'", "'ms'", "'OPTIMISATION'", "'VARIABLES'", 
            "'OBJECTIVES'", "'CONSTRAINTS'", "'range'", "'assert'", "'&&'", 
            "'||'", "'=='", "'!='", "'<='", "'>='", "'<'", "'>'", "'+'", 
            "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "COMPONENT", "CONNECT", "PROPERTY", "PERIOD", "DEADLINE", "WCET", 
            "PRIORITY", "LATENCY_BUDGET", "CLASS", "SYSTEM", "VEHICLE", 
            "CPU", "SCHEDULER", "CLASS_ORDER", "ARROW", "LBRACE", "RBRACE", 
            "COLON", "SEMI", "EQUAL", "DOT", "LSQUARE", "RSQUARE", "STRING", 
            "INT", "UNIT_MS", "WS", "LINE_COMMENT", "OPTIMISATION", "VARIABLES", 
            "OBJECTIVES", "CONSTRAINTS", "MINIMISE", "MAXIMISE", "RANGE", 
            "ASSERT", "AND", "OR", "EQ", "NEQ", "LE", "GE", "LT", "GT", 
            "PLUS", "MINUS", "STAR", "SLASH", "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "COMPONENT", "CONNECT", "PROPERTY", 
                  "PERIOD", "DEADLINE", "WCET", "PRIORITY", "LATENCY_BUDGET", 
                  "CLASS", "SYSTEM", "VEHICLE", "CPU", "SCHEDULER", "CLASS_ORDER", 
                  "ARROW", "LBRACE", "RBRACE", "COLON", "SEMI", "EQUAL", 
                  "DOT", "LSQUARE", "RSQUARE", "STRING", "INT", "UNIT_MS", 
                  "WS", "LINE_COMMENT", "OPTIMISATION", "VARIABLES", "OBJECTIVES", 
                  "CONSTRAINTS", "MINIMISE", "MAXIMISE", "RANGE", "ASSERT", 
                  "AND", "OR", "EQ", "NEQ", "LE", "GE", "LT", "GT", "PLUS", 
                  "MINUS", "STAR", "SLASH", "ID" ]

    grammarFileName = "Robotics.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


